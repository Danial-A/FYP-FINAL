[{"D:\\FYP-Implementation\\40% Implementation\\01\\src\\index.js":"1","D:\\FYP-Implementation\\40% Implementation\\01\\src\\App.js":"2","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\navigation-bar\\navbar.js":"3","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\description-section\\HeroSection.js":"4","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\teams-section\\team.js":"5","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\contact-us-section\\contact-us.js":"6","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\footer-section\\footer.js":"7","D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\homepage.js":"8","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\sign-up\\signup.js":"9","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\sign-in\\signin.js":"10","D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\userProfile.js":"11","D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\UserProfile.js":"12","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\post-component\\post.js":"13","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\post-component\\pagination.js":"14","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\Profile-Information\\ProfileInformation.js":"15","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\Profile-Information\\UserInformation.js":"16","D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\UserHomePage.js":"17","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\navigation-bar\\userNavbar.js":"18","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\create-post\\create-post.js":"19","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\comments\\comment.js":"20","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\comments\\comments-display.js":"21","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\index.js":"22","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\App.js":"23","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\homepage.js":"24","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\UserProfile.js":"25","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\UserHomePage.js":"26","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\sign-up\\signup.js":"27","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\sign-in\\signin.js":"28","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\description-section\\HeroSection.js":"29","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\teams-section\\team.js":"30","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\footer-section\\footer.js":"31","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\Profile-Information\\ProfileInformation.js":"32","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\post-component\\pagination.js":"33","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\post-component\\post.js":"34","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\Profile-Information\\UserInformation.js":"35","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\navigation-bar\\userNavbar.js":"36","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\navigation-bar\\navbar.js":"37","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\contact-us-section\\contact-us.js":"38","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\create-post\\create-post.js":"39","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\comments\\comment.js":"40","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\comments\\comments-display.js":"41","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\GroupPage.js":"42","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\index.js":"43","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\App.js":"44","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\postPage.js":"45","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\homepage.js":"46","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\UserProfile.js":"47","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\UserHomePage.js":"48","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\WhiteBoard.js":"49","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\messenger.js":"50","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\editorPage.js":"51","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\GroupPage.js":"52","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\sign-in\\signin.js":"53","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\sign-up\\signup.js":"54","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\groupsDisplayHome.js":"55","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\post-component\\pagination.js":"56","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\post-component\\post.js":"57","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\editor-components\\outputsection.js":"58","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\editor-components\\videosection.js":"59","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\navigation-bar\\userNavbar.js":"60","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\navigation-bar\\navbar.js":"61","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\comments\\comment.js":"62","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\footer-section\\footer.js":"63","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\comments\\comments-display.js":"64","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\teams-section\\team.js":"65","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\contact-us-section\\contact-us.js":"66","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\description-section\\HeroSection.js":"67","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\Profile-Information\\ProfileInformation.js":"68","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\Profile-Information\\UserInformation.js":"69","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\userSearch\\searchPanel.js":"70","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\create-post\\create-post.js":"71","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\messenger\\mainchat-area.js":"72","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\messenger\\sidechat-panel.js":"73","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\whiteboard\\container\\Container.js":"74","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\messenger\\message.js":"75","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\user-search-component\\userSearch.js":"76","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\whiteboard\\board\\Board.js":"77","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\user-search-component\\userBox.js":"78","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\Youtube.js":"79","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\Searchbar.js":"80","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\VideoList.js":"81","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\VideoDetail.js":"82","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\VideoItem.js":"83","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\apis\\youtube.js":"84","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\Profile-Information\\usercard.js":"85","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\conversations\\conversation.js":"86","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\follow-card\\followcard.js":"87","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\Messenger.js":"88","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\conversations\\Conversation.js":"89","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\message\\Message.js":"90","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\chatOnline\\ChatOnline.js":"91","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\group-search\\group-search-component.js":"92","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\group-search\\groupBox.js":"93","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\recommendations\\recommendedUsers.js":"94","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\interests\\UserInterests.js":"95","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\recommendations\\RecommendedUserCard.js":"96","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\memberCard.js":"97","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\AddUserCard.js":"98","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\video-chat-room\\JitsiComponent.js":"99","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\group-channels\\groupChannels.js":"100"},{"size":258,"mtime":1613573430499,"results":"101","hashOfConfig":"102"},{"size":700,"mtime":1608237100981,"results":"103","hashOfConfig":"102"},{"size":1182,"mtime":1607968047893,"results":"104","hashOfConfig":"102"},{"size":966,"mtime":1608237089757,"results":"105","hashOfConfig":"102"},{"size":3384,"mtime":1608313559853,"results":"106","hashOfConfig":"102"},{"size":1526,"mtime":1608315838783,"results":"107","hashOfConfig":"102"},{"size":359,"mtime":1607953543421,"results":"108","hashOfConfig":"102"},{"size":599,"mtime":1607965820377,"results":"109","hashOfConfig":"102"},{"size":10548,"mtime":1609011681367,"results":"110","hashOfConfig":"102"},{"size":5161,"mtime":1608415868828,"results":"111","hashOfConfig":"102"},{"size":235,"mtime":1608066428756,"results":"112","hashOfConfig":"102"},{"size":2993,"mtime":1608796909370,"results":"113","hashOfConfig":"102"},{"size":4141,"mtime":1613825991372,"results":"114","hashOfConfig":"102"},{"size":843,"mtime":1608138611051,"results":"115","hashOfConfig":"102"},{"size":1075,"mtime":1608451793424,"results":"116","hashOfConfig":"102"},{"size":1231,"mtime":1608410127639,"results":"117","hashOfConfig":"102"},{"size":942,"mtime":1608412357013,"results":"118","hashOfConfig":"102"},{"size":1175,"mtime":1608460676807,"results":"119","hashOfConfig":"102"},{"size":2946,"mtime":1608826680320,"results":"120","hashOfConfig":"102"},{"size":2145,"mtime":1608999274275,"results":"121","hashOfConfig":"102"},{"size":948,"mtime":1609000818932,"results":"122","hashOfConfig":"102"},{"size":258,"mtime":1613573430499,"results":"123","hashOfConfig":"124"},{"size":807,"mtime":1613930332709,"results":"125","hashOfConfig":"124"},{"size":599,"mtime":1607965820377,"results":"126","hashOfConfig":"124"},{"size":3028,"mtime":1613849693532,"results":"127","hashOfConfig":"124"},{"size":942,"mtime":1608412357013,"results":"128","hashOfConfig":"124"},{"size":10586,"mtime":1613898791241,"results":"129","hashOfConfig":"124"},{"size":5583,"mtime":1613934277400,"results":"130","hashOfConfig":"124"},{"size":966,"mtime":1608237089757,"results":"131","hashOfConfig":"124"},{"size":3384,"mtime":1608313559853,"results":"132","hashOfConfig":"124"},{"size":359,"mtime":1607953543421,"results":"133","hashOfConfig":"124"},{"size":1415,"mtime":1613934340200,"results":"134","hashOfConfig":"124"},{"size":843,"mtime":1608138611051,"results":"135","hashOfConfig":"124"},{"size":3991,"mtime":1613935262375,"results":"136","hashOfConfig":"124"},{"size":1677,"mtime":1613847268104,"results":"137","hashOfConfig":"124"},{"size":1298,"mtime":1613933052046,"results":"138","hashOfConfig":"124"},{"size":1182,"mtime":1607968047893,"results":"139","hashOfConfig":"124"},{"size":1526,"mtime":1608315838783,"results":"140","hashOfConfig":"124"},{"size":3063,"mtime":1613934762454,"results":"141","hashOfConfig":"124"},{"size":2145,"mtime":1608999274275,"results":"142","hashOfConfig":"124"},{"size":602,"mtime":1613935373445,"results":"143","hashOfConfig":"124"},{"size":175,"mtime":1613930224983,"results":"144","hashOfConfig":"124"},{"size":365,"mtime":1623787673314,"results":"145","hashOfConfig":"146"},{"size":3310,"mtime":1624448316970,"results":"147","hashOfConfig":"146"},{"size":5068,"mtime":1624647992339,"results":"148","hashOfConfig":"146"},{"size":579,"mtime":1620113670000,"results":"149","hashOfConfig":"146"},{"size":3361,"mtime":1624956217798,"results":"150","hashOfConfig":"146"},{"size":1590,"mtime":1622833876594,"results":"151","hashOfConfig":"146"},{"size":221,"mtime":1620113670000,"results":"152","hashOfConfig":"146"},{"size":1326,"mtime":1622020016081,"results":"153","hashOfConfig":"146"},{"size":6912,"mtime":1624958685845,"results":"154","hashOfConfig":"146"},{"size":11318,"mtime":1624377206749,"results":"155","hashOfConfig":"146"},{"size":5668,"mtime":1622550804451,"results":"156","hashOfConfig":"146"},{"size":10274,"mtime":1622630032539,"results":"157","hashOfConfig":"146"},{"size":4072,"mtime":1622722402056,"results":"158","hashOfConfig":"146"},{"size":814,"mtime":1620113670000,"results":"159","hashOfConfig":"146"},{"size":8360,"mtime":1624536732034,"results":"160","hashOfConfig":"146"},{"size":400,"mtime":1622028567655,"results":"161","hashOfConfig":"146"},{"size":536,"mtime":1624003111423,"results":"162","hashOfConfig":"146"},{"size":1695,"mtime":1624104966777,"results":"163","hashOfConfig":"146"},{"size":1153,"mtime":1624105027402,"results":"164","hashOfConfig":"146"},{"size":1808,"mtime":1621271711587,"results":"165","hashOfConfig":"146"},{"size":392,"mtime":1620113670000,"results":"166","hashOfConfig":"146"},{"size":5341,"mtime":1622864019451,"results":"167","hashOfConfig":"146"},{"size":3318,"mtime":1622029249697,"results":"168","hashOfConfig":"146"},{"size":1484,"mtime":1620113670000,"results":"169","hashOfConfig":"146"},{"size":935,"mtime":1624105095760,"results":"170","hashOfConfig":"146"},{"size":3639,"mtime":1622819534882,"results":"171","hashOfConfig":"146"},{"size":12386,"mtime":1623918679868,"results":"172","hashOfConfig":"146"},{"size":3213,"mtime":1622235754940,"results":"173","hashOfConfig":"146"},{"size":3236,"mtime":1622807806087,"results":"174","hashOfConfig":"146"},{"size":2313,"mtime":1622058003038,"results":"175","hashOfConfig":"146"},{"size":3201,"mtime":1622560297733,"results":"176","hashOfConfig":"146"},{"size":2953,"mtime":1620642114000,"results":"177","hashOfConfig":"146"},{"size":882,"mtime":1622019124264,"results":"178","hashOfConfig":"146"},{"size":1853,"mtime":1621752251794,"results":"179","hashOfConfig":"146"},{"size":3085,"mtime":1620642726000,"results":"180","hashOfConfig":"146"},{"size":1979,"mtime":1622319864947,"results":"181","hashOfConfig":"146"},{"size":3354,"mtime":1621756617959,"results":"182","hashOfConfig":"146"},{"size":1069,"mtime":1621752532839,"results":"183","hashOfConfig":"146"},{"size":422,"mtime":1621702012000,"results":"184","hashOfConfig":"146"},{"size":890,"mtime":1621756933277,"results":"185","hashOfConfig":"146"},{"size":531,"mtime":1621702012000,"results":"186","hashOfConfig":"146"},{"size":256,"mtime":1621755521143,"results":"187","hashOfConfig":"146"},{"size":581,"mtime":1621954231763,"results":"188","hashOfConfig":"146"},{"size":979,"mtime":1622028957583,"results":"189","hashOfConfig":"146"},{"size":2813,"mtime":1624695441473,"results":"190","hashOfConfig":"146"},{"size":8422,"mtime":1622842241056,"results":"191","hashOfConfig":"146"},{"size":1138,"mtime":1623918781186,"results":"192","hashOfConfig":"146"},{"size":1105,"mtime":1623918935727,"results":"193","hashOfConfig":"146"},{"size":4680,"mtime":1623868190122,"results":"194","hashOfConfig":"146"},{"size":1895,"mtime":1622236153964,"results":"195","hashOfConfig":"146"},{"size":1022,"mtime":1622237094393,"results":"196","hashOfConfig":"146"},{"size":1554,"mtime":1622862994992,"results":"197","hashOfConfig":"146"},{"size":1301,"mtime":1622845604104,"results":"198","hashOfConfig":"146"},{"size":1350,"mtime":1622844180215,"results":"199","hashOfConfig":"146"},{"size":2065,"mtime":1623922302163,"results":"200","hashOfConfig":"146"},{"size":1332,"mtime":1624694736165,"results":"201","hashOfConfig":"146"},{"size":4892,"mtime":1624356851453,"results":"202","hashOfConfig":"146"},{"size":523,"mtime":1624377237507,"results":"203","hashOfConfig":"146"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j23oqp",{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"208"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"208"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"208"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"208"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"208"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"208"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},"1qpqgqm",{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"256"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"256"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"256"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"256"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"256"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"256"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},"yp8or0",{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"302"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"302"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"302"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"302"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"302"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"302"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"302"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"302"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"302"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"302"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"302"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"302"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"302"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"302"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"302"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"302"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"302"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"321"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"321"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"321"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"302"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"321"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"302"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"302"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"302"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":1,"source":"426","usedDeprecatedRules":"302"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"431"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"436","usedDeprecatedRules":"302"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"302"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"302"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"302"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},"D:\\FYP-Implementation\\40% Implementation\\01\\src\\index.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\App.js",[],["450","451"],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\navigation-bar\\navbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\description-section\\HeroSection.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\teams-section\\team.js",["452"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './team.css'\r\nimport {Container, Row, Col, Card} from 'react-bootstrap'\r\nimport {FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faFacebook, faTwitter, faGithub,faInstagram} from '@fortawesome/free-brands-svg-icons'\r\n\r\nfunction TeamSection() {\r\n    return (\r\n        <div className=\"card-container\" style = {{backgroundColor : \"#fff\"}}>\r\n        <Container  className= \"team-container\" id = \"about\">\r\n            <Row>\r\n               \r\n                <Col md ={6} className = \"ml-auto card-column\">\r\n                    <Card style={{ width: '18rem' }} className = \"card-main\">\r\n                    <div>\r\n                        <Card.Img variant=\"top\" src=\"images/Dp.svg\" className = \"card-image\" />\r\n                    </div>\r\n                    <Card.Body>\r\n                    <Card.Title>Danial Ahmad</Card.Title>\r\n                    <Card.Text className = \"card-information\">\r\n                        <pre>Full Stack Developer</pre>\r\n                        <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Unde, aliquam?</p>\r\n                    </Card.Text>\r\n                    <div className=\"social-links\">\r\n                        <Container >\r\n                            <Row className = \"center-text\">\r\n                                <Col><FontAwesomeIcon icon ={faFacebook} size = \"2x\"/></Col>\r\n                                <Col><FontAwesomeIcon icon ={faGithub} size = \"2x\"/></Col>\r\n                                <Col><FontAwesomeIcon icon ={faTwitter} size = \"2x\"/></Col>\r\n                                <Col><FontAwesomeIcon icon ={faInstagram} size = \"2x\"/></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </div>\r\n                    </Card.Body>\r\n                    </Card>                \r\n                </Col>\r\n                <Col md ={6} className = \"ml-auto card-column\">\r\n                    <Card style={{ width: '18rem' }} className = \"card-main\">\r\n                    <div>\r\n                        <Card.Img variant=\"top\" src=\"images/Dp.svg\" className = \"card-image\" />\r\n                    </div>\r\n                    <Card.Body>\r\n                    <Card.Title>Awais Bin Saqib</Card.Title>\r\n                    <Card.Text className = \"card-text\">\r\n                        <pre>Data Analyst</pre>\r\n                        <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Unde, aliquam?</p>\r\n                    </Card.Text>\r\n                    <div className=\"social-links\">\r\n                        <Container >\r\n                            <Row className = \"center-text\">\r\n                                <Col><a><FontAwesomeIcon icon ={faFacebook} size = \"2x\"/></a></Col>\r\n                                <Col><FontAwesomeIcon icon ={faGithub} size = \"2x\"/></Col>\r\n                                <Col><FontAwesomeIcon icon ={faTwitter} size = \"2x\"/></Col>\r\n                                <Col><FontAwesomeIcon icon ={faInstagram} size = \"2x\"/></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </div>\r\n                    </Card.Body>\r\n                    </Card>                \r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TeamSection\r\n","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\contact-us-section\\contact-us.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\footer-section\\footer.js",["453"],"import React from 'react'\r\nimport './footer.css'\r\nfunction Footer() {\r\n    return (\r\n        <div style = {{backgroundColor:\"white\"}}>\r\n            <footer className = \"footer-section\">\r\n           <p> &copy; {new Date().getFullYear()} Copyright: <a href=\"#\"> EduNetwork.com </a></p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\homepage.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\sign-up\\signup.js",["454"],"import React, {useState} from 'react'\r\nimport './signup.css'\r\nimport {useHistory} from 'react-router-dom'\r\nimport NavigationBar from '../../components/navigation-bar/navbar'\r\nimport Footer from '../../components/footer-section/footer'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './signup.css'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\nfunction SignUp(props) {\r\n\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    const initialValues = {\r\n        firstname: '',\r\n        lastname: '',\r\n        emailid: '',\r\n        username: '',\r\n        password:'',\r\n        confirmpassword: '',\r\n        dob:''\r\n    }\r\n    const onSubmit =( values, onSubmitProps)=>{\r\n        setRedirect(true);\r\n        axios.post('http://localhost:8080/users/sign-up',values)\r\n        .then((res)=>{console.log(res.data)})\r\n        .catch(err =>{ console.log('Error: '+err)});\r\n        onSubmitProps.resetForm()\r\n        \r\n    }\r\n    let history = useHistory();\r\n    function redirectUser(){\r\n        if(redirect){\r\n            history.push('/sign-in');\r\n        }\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        firstname: Yup.string().required('This field is required..'),\r\n        lastname: Yup.string().required('This field is required..'),\r\n        emailid: Yup.string().email('Enter a valid email address..').required('This field is required..'),\r\n        username: Yup.string().required('This field is required..'),\r\n        password: Yup.string().required('This field is required..'),\r\n        dob: Yup.string().required('This field is required..'),\r\n        confirmpassword: Yup.string().required('This field is required..').when(\"password\", {\r\n            is:val => (val && val.length > 0 ? true : false),\r\n            then : Yup.string().oneOf([Yup.ref(\"password\")], \"Value must match the entered password..\")\r\n        })\r\n    })\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n     return (\r\n        <div className = \"main-body\">\r\n            <NavigationBar/>\r\n                <div className=\"container signin-container\">\r\n                    <div className=\"row signin-row\">\r\n                        <div className=\"col-sm-8\" style = {{padding: '0'}}>\r\n                            <div className=\"signup-form-section signup\">\r\n                                <form onSubmit = {formik.handleSubmit}>\r\n                                    <h3 className=\"text-light text-center\">\r\n                                        Sign Up For Your Account!\r\n                                    </h3>\r\n                                    <div className=\"row section-divider\">\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                            <label htmlFor=\"firstname\" className = \"text-light form-label\">First Name:</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4 form-fields\">\r\n                                            <input type=\"text\" name=\"firstname\" id=\"firstname\" className = \"form-controller\"\r\n                                            placeholder =\"Enter first name..\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.firstname}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.firstname && formik.touched.firstname ? <div className = \"error\"><p>{formik.errors.firstname}</p></div> : null}\r\n                                        </div>\r\n\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                        <label htmlFor=\"lastname\" className = \"text-light form-label\">Last Name:</label>\r\n                                    </div>\r\n                                    <div className=\"col-lg-4 form-fields\">\r\n                                        <input type=\"text\" name=\"lastname\" id=\"lastname\" placeholder =\"Enter last name..\" className = \"form-controller\"\r\n                                        onChange = {formik.handleChange}\r\n                                        value = {formik.values.lastname}\r\n                                        onBlur = {formik.handleBlur}\r\n                                        />\r\n                                        {formik.errors.lastname && formik.touched.lastname ? <div className = \"error\"><p>{formik.errors.lastname}</p></div> : null}\r\n                                    </div>\r\n                                    </div>\r\n                                    <div className=\"row section-divider\">\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                            <label htmlFor=\"emailid\" className = \"text-light form-label\">Email ID:</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4 form-fields\">\r\n                                            <input type=\"email\" name=\"emailid\" id=\"emailid\" placeholder =\"yourname@example.com\" className = \"form-controller\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.emailid}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.emailid && formik.touched.emailid ? <div className = \"error\"><p>{formik.errors.emailid}</p></div> : null}\r\n                                        </div>\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                            <label htmlFor=\"username\" className = \"text-light form-label\">Username:</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4 form-fields\">\r\n                                            <input type=\"text\" name=\"username\" id=\"username\" placeholder =\"example123\" className = \"form-controller\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.username}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.username && formik.touched.username ? <div className = \"error\"><p>{formik.errors.username}</p></div> : null}\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n\r\n                                    <div className=\"row section-divider\">\r\n                                    <div className=\"col-lg-2 text-light\">\r\n                                        <label htmlFor=\"pasword\" className = \"text-light form-label\">Enter Password:</label>\r\n                                    </div>\r\n                                    <div className=\"col-lg-4 form-fields\">\r\n                                        <input type=\"password\" name=\"password\" id=\"password\" className = \"form-controller\"\r\n                                        onChange = {formik.handleChange}\r\n                                        value = {formik.values.password}\r\n                                        onBlur = {formik.handleBlur}\r\n                                        />\r\n                                        {formik.errors.password && formik.touched.password ? <div className = \"error\"><p>{formik.errors.password}</p></div> : null}\r\n                                    </div>\r\n                                    <div className=\"col-lg-2 text-light\">\r\n                                        <label htmlFor=\"confirmpassword\" className = \"text-light form-label\">Confirm Password:</label>\r\n                                    </div>\r\n                                    <div className=\"col-lg-4 form-fields\">\r\n                                        <input type=\"password\" name=\"confirmpassword\" id=\"confirmpassword\" className = \"form-controller\"\r\n                                        onChange = {formik.handleChange}\r\n                                        value = {formik.values.confirmpassword}\r\n                                        onBlur = {formik.handleBlur}\r\n                                        />\r\n                                        {formik.errors.confirmpassword && formik.touched.confirmpassword ? <div className = \"error\"><p>{formik.errors.confirmpassword}</p></div> : null}\r\n                                    </div>\r\n                                    <div className=\"row section-divider dob\">\r\n                                        <div className=\"col-lg-4 text-light\">\r\n                                            <label htmlFor=\"date\" className=\"text-light form-label dob-label\">Select DOB</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-8 form-fields dob\">\r\n                                            <input type=\"date\" name=\"dob\" id=\"dob\" className = \"form-controller\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.dob}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.dob && formik.touched.dob ? <div className = \"error\"><p>{formik.errors.dob}</p></div> : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"login-btn\">\r\n                                        <button type = \"submit\" className = \"btn btn-danger\" onClick = {redirectUser()}>Submit</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-4 signup\">\r\n                        <img src=\"/images/signup.svg\" alt=\"sign in image\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\sign-in\\signin.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\userProfile.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\UserProfile.js",["455"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport axios from 'axios'\r\nimport NavigationBar from '../components/navigation-bar/userNavbar'\r\nimport './UserProfile.css'\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\nimport Footer from '../components/footer-section/footer'\r\nimport Post from '../components/post-component/post'\r\nimport Pagination from '../components/post-component/pagination'\r\nimport ProfileInformation from '../components/Profile-Information/ProfileInformation'\r\nimport UserInformation from '../components/Profile-Information/UserInformation'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport UserPost from '../components/create-post/create-post'\r\n\r\n\r\nfunction UserProfile() {\r\n    \r\n    const [posts, setPosts] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage] = useState(2);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n  \r\n        const fetchPosts = async ()=>{\r\n            setLoading(true);\r\n            const response = await axios.get('http://localhost:8080/posts');\r\n            setPosts(response.data);\r\n            setLoading(false)\r\n        }\r\n        fetchPosts()\r\n\r\n    }, []);\r\n\r\n    //Current Posts\r\n    const lastPostIndex = currentPage * postsPerPage;\r\n    const firstPostIndex = lastPostIndex - postsPerPage;\r\n    const currentPosts = posts.slice(firstPostIndex, lastPostIndex)\r\n    \r\n\r\n    const paginate = (pageNumber)=>{\r\n        setCurrentPage(pageNumber)\r\n    }\r\n\r\n    return (\r\n        <div style = {{backgroundColor: '#1c2237', height:\"auto\"}}>\r\n            <NavigationBar/>\r\n            <div className=\"cover-container\">\r\n                <div className=\"cover-image\">\r\n                    <img src=\"/images/background.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className=\"profile-image\">\r\n                    <img src=\"/images/Dp.svg\" alt=\"\"/>\r\n                </div>\r\n            </div>\r\n            <Container fluid className = \"user-information-section\">\r\n                <Row>\r\n                    <Col  lg = {3} className = \"demo\">\r\n                        <UserInformation/>\r\n                    </Col>\r\n                        \r\n                    <Col lg = {6} className = \"demo user-post-section\">\r\n                        <UserPost totalposts = {posts}/>\r\n                        <div className=\"post-heading\"s style = {{textAlign:'center'}}>\r\n                            <h2>User Posts</h2>\r\n                        </div>\r\n                        <Post posts = {currentPosts} loading= {loading} />\r\n                        <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate= {paginate}/>\r\n                    </Col>\r\n                    <Col lg = {3} className = \"demo\">\r\n                        <ProfileInformation/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Footer/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserProfile\r\n","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\post-component\\post.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\post-component\\pagination.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\Profile-Information\\ProfileInformation.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\Profile-Information\\UserInformation.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\pages\\UserHomePage.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\navigation-bar\\userNavbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\create-post\\create-post.js",["456","457"],"import React, {useState,useEffect,useRef} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './create-post.css'\r\nimport { useFormik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\n\r\nfunction UserPost(TotalPosts) {\r\n\r\n    const {totalPosts, setPosts} = useState(TotalPosts);\r\n\r\n    const initialValues = {\r\n        title: '',\r\n        body: '',\r\n        username: \"Danial\"\r\n    }\r\n    const onSubmit = values =>{\r\n        axios.post('http://localhost:8080/posts/add', values)\r\n        .then(res =>{\r\n            window.alert(\"Post Added!\");\r\n            setPosts([...totalPosts])\r\n        })\r\n        .catch(err =>{ console.log(\"Error: \"+err)})\r\n        console.log(values)\r\n    }\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('This field is required..'),\r\n        body: Yup.string().required('This field is required..')\r\n    })\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n            <h3 style = {{color:'white'}}>Create a new post..</h3>\r\n            <form onSubmit = {formik.handleSubmit}>\r\n                <div className=\"row\">\r\n                <div className=\"col post-heading\">\r\n                    <label htmlFor=\"postheading\" style= {{color:'white'}}>Post Heading:</label>\r\n                    <input type=\"text\" name=\"title\" id=\"title\" style = {{width: \"100%\"}}\r\n                        placeholder =\"Enter the post title...\"\r\n                        onChange = {formik.handleChange}\r\n                        onBlur = {formik.onBlur}\r\n                        value = {formik.values.title}\r\n                    />\r\n                    {formik.errors.heading && formik.touched.title ? <div style = {{color: 'crimson'}}><p>{formik.errors.heading}</p></div> : null}\r\n                </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className=\"post-body\">\r\n                        <label htmlFor=\"body\" style= {{color:'white'}}>Post Body: </label>\r\n                        <textarea name=\"body\" id=\"body\" rows=\"6\" \r\n                        placeholder = \"Enter the post description....\"\r\n                        onChange = {formik.handleChange}\r\n                        onBlur = {formik.onBlur}\r\n                        value = {formik.values.body}\r\n                        />\r\n                        {formik.errors.body && formik.touched.body ? <div style = {{color: 'crimson'}}><p>{formik.errors.body}</p></div> : null}\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"add-post-button\">\r\n                    <button type = \"submit\">Add Post!</button>\r\n                </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPost\r\n","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\comments\\comment.js",["458"],"import React from 'react'\r\nimport {Formik, useFormik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './comment.css'\r\nimport DisplayComments from './comments-display'\r\nfunction PostComment({postid}) {\r\n    const initialValues = {\r\n        username: 'Danial',\r\n        comment: ''\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        comment: Yup.string().required('This field is required..')\r\n    })\r\n\r\n    \r\n    const onSubmit = (values, onSubmitProps) =>{\r\n        values.username = 'Danial'\r\n         axios.post(`http://localhost:8080/comments/add/${postid}`,values)\r\n         .then(res => {\r\n             console.log(res.data)\r\n             window.alert('Comment Added!');\r\n             window.location.reload(false);\r\n\r\n         })\r\n         .catch(err => console.log(err))\r\n        onSubmitProps.resetForm()\r\n    }\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <div className=\"comments-section\">\r\n            <DisplayComments postid = {postid}/>\r\n        </div>\r\n            <div className =\"container\" style ={{borderTop:\"1px solid black\", padding: \"15px 0\"}}>\r\n            <form onSubmit = {formik.handleSubmit}>\r\n                    <label htmlFor=\"comment\">Add a comment: </label>\r\n                    <input type=\"text\" className = \"form-control\" name = \"comment\" id = \"comment\"\r\n                    value = {formik.values.comment} \r\n                    onChange = {formik.handleChange}\r\n                    onBlur = {formik.handleBlur}\r\n                    />\r\n                    {formik.errors.comment && formik.touched.comment ? <div ><p style = {{color: 'crimson'}}>{formik.errors.comment}</p></div> : null}\r\n                    <div className=\"comment-btn\" style = {{marginTop:\"8px\", textAlign : \"center\"}}>\r\n                        <button className = \"btn btn-danger\" type = 'submit'>Comment</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostComment\r\n","D:\\FYP-Implementation\\40% Implementation\\01\\src\\components\\comments\\comments-display.js",["459"],"import userEvent from '@testing-library/user-event'\r\nimport Axios from 'axios'\r\nimport React, {useState} from 'react'\r\nimport moment from 'moment'\r\n\r\n\r\nimport './comment.css'\r\nfunction DisplayComments(postid) {\r\n    let [comments, setComments] = useState([])\r\n    Axios.get(`http://localhost:8080/comments/${postid}`)\r\n    .then(comment => {\r\n        setComments(comment)\r\n        console.log(comments)\r\n    })\r\n    .catch(err=> console.log(err))\r\n    return (\r\n        <div>\r\n           <pre>Comments</pre>\r\n           {\r\n               \r\n               (comments.length > 0 ) ? (comments.map(com =>(\r\n                <div className=\"comment\">\r\n                     <pre>{com.username}</pre>\r\n                     <p>{com.comment}</p>\r\n                     <pre>Added: {moment(com.createdAt).fromNow()}</pre>\r\n                </div>\r\n            ))) : <p>No Comments</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayComments\r\n","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\index.js",[],["460","461"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\App.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\homepage.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\UserProfile.js",["462"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport axios from 'axios'\r\nimport NavigationBar from '../components/navigation-bar/userNavbar'\r\nimport './UserProfile.css'\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\nimport Footer from '../components/footer-section/footer'\r\nimport Post from '../components/post-component/post'\r\nimport Pagination from '../components/post-component/pagination'\r\nimport ProfileInformation from '../components/Profile-Information/ProfileInformation'\r\nimport UserInformation from '../components/Profile-Information/UserInformation'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport UserPost from '../components/create-post/create-post'\r\n\r\n\r\nfunction UserProfile() {\r\n    \r\n    const [posts, setPosts] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage] = useState(2);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n  \r\n        const fetchPosts = async ()=>{\r\n            setLoading(true);\r\n            const response = await axios.post('http://localhost:8080/posts/user/posts', {\"author\": \"dani123\"});\r\n            setPosts(response.data);\r\n            setLoading(false)\r\n        }\r\n        fetchPosts()\r\n\r\n    }, []);\r\n\r\n    //Current Posts\r\n    const lastPostIndex = currentPage * postsPerPage;\r\n    const firstPostIndex = lastPostIndex - postsPerPage;\r\n    const currentPosts = posts.slice(firstPostIndex, lastPostIndex)\r\n    \r\n\r\n    const paginate = (pageNumber)=>{\r\n        setCurrentPage(pageNumber)\r\n    }\r\n\r\n    return (\r\n        <div style = {{backgroundColor: '#1c2237', height:\"auto\"}}>\r\n            <NavigationBar/>\r\n            <div className=\"cover-container\">\r\n                <div className=\"cover-image\">\r\n                    <img src=\"/images/background.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className=\"profile-image\">\r\n                    <img src=\"/images/Dp.svg\" alt=\"\"/>\r\n                </div>\r\n            </div>\r\n            <Container fluid className = \"user-information-section\">\r\n                <Row>\r\n                    <Col  lg = {3} className = \"demo\">\r\n                        <UserInformation/>\r\n                    </Col>\r\n                        \r\n                    <Col lg = {6} className = \"demo user-post-section\">\r\n                        <UserPost totalposts = {posts}/>\r\n                        <div className=\"post-heading\"s style = {{textAlign:'center'}}>\r\n                            <h2>User Posts</h2>\r\n                        </div>\r\n                        <Post posts = {currentPosts} loading= {loading} />\r\n                        <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate= {paginate}/>\r\n                    </Col>\r\n                    <Col lg = {3} className = \"demo\">\r\n                        <ProfileInformation/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Footer/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserProfile\r\n","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\UserHomePage.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\sign-up\\signup.js",["463","464"],"import React, {useState} from 'react'\r\nimport './signup.css'\r\nimport {useHistory} from 'react-router-dom'\r\nimport NavigationBar from '../../components/navigation-bar/navbar'\r\nimport Footer from '../../components/footer-section/footer'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './signup.css'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\nfunction SignUp(props) {\r\n\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    const initialValues = {\r\n        firstname: '',\r\n        lastname: '',\r\n        emailid: '',\r\n        username: '',\r\n        password:'',\r\n        dob:'',\r\n        chatId:\"AddChatIDWhenImplementingSockets\"\r\n        \r\n    }\r\n    const onSubmit =( values, onSubmitProps)=>{\r\n        // setRedirect(true);\r\n        axios.post('http://localhost:8080/users/register',values)\r\n        .then((res)=>{console.log(res.data)})\r\n        .catch(err =>{ console.log('Error: '+err)});\r\n       // onSubmitProps.resetForm()\r\n        \r\n    }\r\n    let history = useHistory();\r\n    function redirectUser(){\r\n        if(redirect){\r\n            history.push('/sign-in');\r\n        }\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        firstname: Yup.string().required('This field is required..'),\r\n        lastname: Yup.string().required('This field is required..'),\r\n        emailid: Yup.string().email('Enter a valid email address..').required('This field is required..'),\r\n        username: Yup.string().required('This field is required..'),\r\n        password: Yup.string().required('This field is required..'),\r\n        dob: Yup.string().required('This field is required..'),\r\n        confirmpassword: Yup.string().required('This field is required..').when(\"password\", {\r\n            is:val => (val && val.length > 0 ? true : false),\r\n            then : Yup.string().oneOf([Yup.ref(\"password\")], \"Value must match the entered password..\")\r\n        })\r\n    })\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n     return (\r\n        <div className = \"main-body\">\r\n            <NavigationBar/>\r\n                <div className=\"container signin-container\">\r\n                    <div className=\"row signin-row\">\r\n                        <div className=\"col-sm-8\" style = {{padding: '0'}}>\r\n                            <div className=\"signup-form-section signup\">\r\n                                <form onSubmit = {formik.handleSubmit}>\r\n                                    <h3 className=\"text-light text-center\">\r\n                                        Sign Up For Your Account!\r\n                                    </h3>\r\n                                    <div className=\"row section-divider\">\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                            <label htmlFor=\"firstname\" className = \"text-light form-label\">First Name:</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4 form-fields\">\r\n                                            <input type=\"text\" name=\"firstname\" id=\"firstname\" className = \"form-controller\"\r\n                                            placeholder =\"Enter first name..\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.firstname}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.firstname && formik.touched.firstname ? <div className = \"error\"><p>{formik.errors.firstname}</p></div> : null}\r\n                                        </div>\r\n\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                        <label htmlFor=\"lastname\" className = \"text-light form-label\">Last Name:</label>\r\n                                    </div>\r\n                                    <div className=\"col-lg-4 form-fields\">\r\n                                        <input type=\"text\" name=\"lastname\" id=\"lastname\" placeholder =\"Enter last name..\" className = \"form-controller\"\r\n                                        onChange = {formik.handleChange}\r\n                                        value = {formik.values.lastname}\r\n                                        onBlur = {formik.handleBlur}\r\n                                        />\r\n                                        {formik.errors.lastname && formik.touched.lastname ? <div className = \"error\"><p>{formik.errors.lastname}</p></div> : null}\r\n                                    </div>\r\n                                    </div>\r\n                                    <div className=\"row section-divider\">\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                            <label htmlFor=\"emailid\" className = \"text-light form-label\">Email ID:</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4 form-fields\">\r\n                                            <input type=\"email\" name=\"emailid\" id=\"emailid\" placeholder =\"yourname@example.com\" className = \"form-controller\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.emailid}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.emailid && formik.touched.emailid ? <div className = \"error\"><p>{formik.errors.emailid}</p></div> : null}\r\n                                        </div>\r\n                                        <div className=\"col-lg-2 text-light\">\r\n                                            <label htmlFor=\"username\" className = \"text-light form-label\">Username:</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4 form-fields\">\r\n                                            <input type=\"text\" name=\"username\" id=\"username\" placeholder =\"example123\" className = \"form-controller\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.username}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.username && formik.touched.username ? <div className = \"error\"><p>{formik.errors.username}</p></div> : null}\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n\r\n                                    <div className=\"row section-divider\">\r\n                                    <div className=\"col-lg-2 text-light\">\r\n                                        <label htmlFor=\"pasword\" className = \"text-light form-label\">Enter Password:</label>\r\n                                    </div>\r\n                                    <div className=\"col-lg-4 form-fields\">\r\n                                        <input type=\"password\" name=\"password\" id=\"password\" className = \"form-controller\"\r\n                                        onChange = {formik.handleChange}\r\n                                        value = {formik.values.password}\r\n                                        onBlur = {formik.handleBlur}\r\n                                        />\r\n                                        {formik.errors.password && formik.touched.password ? <div className = \"error\"><p>{formik.errors.password}</p></div> : null}\r\n                                    </div>\r\n                                    <div className=\"col-lg-2 text-light\">\r\n                                        <label htmlFor=\"confirmpassword\" className = \"text-light form-label\">Confirm Password:</label>\r\n                                    </div>\r\n                                    <div className=\"col-lg-4 form-fields\">\r\n                                        <input type=\"password\" name=\"confirmpassword\" id=\"confirmpassword\" className = \"form-controller\"\r\n                                        onChange = {formik.handleChange}\r\n                                        value = {formik.values.confirmpassword}\r\n                                        onBlur = {formik.handleBlur}\r\n                                        />\r\n                                        {formik.errors.confirmpassword && formik.touched.confirmpassword ? <div className = \"error\"><p>{formik.errors.confirmpassword}</p></div> : null}\r\n                                    </div>\r\n                                    <div className=\"row section-divider dob\">\r\n                                        <div className=\"col-lg-4 text-light\">\r\n                                            <label htmlFor=\"date\" className=\"text-light form-label dob-label\">Select DOB</label>\r\n                                        </div>\r\n                                        <div className=\"col-lg-8 form-fields dob\">\r\n                                            <input type=\"date\" name=\"dob\" id=\"dob\" className = \"form-controller\"\r\n                                            onChange = {formik.handleChange}\r\n                                            value = {formik.values.dob}\r\n                                            onBlur = {formik.handleBlur}\r\n                                            />\r\n                                            {formik.errors.dob && formik.touched.dob ? <div className = \"error\"><p>{formik.errors.dob}</p></div> : null}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"login-btn\">\r\n                                        <button type = \"submit\" className = \"btn btn-danger\" onClick = {redirectUser()}>Submit</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-4 signup\">\r\n                        <img src=\"/images/signup.svg\" alt=\"sign in image\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\sign-in\\signin.js",["465","466"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\description-section\\HeroSection.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\teams-section\\team.js",["467"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\footer-section\\footer.js",["468"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\Profile-Information\\ProfileInformation.js",["469","470"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\post-component\\pagination.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\post-component\\post.js",["471"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\Profile-Information\\UserInformation.js",["472","473"],"import { faUser, faEnvelope, faCalendar, faUsers } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, {useState, useEffect, useRef} from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\n\r\nimport './UserInformation.css'\r\n\r\nfunction UserInformation() {\r\n    const user = Cookies.get('user')\r\n    const [User,setUser] = useState({})\r\n    useEffect(()=>{\r\n            async function getUserInfo(){\r\n            const UserInformation =  await axios.get(`http://localhost:8080/users/${user}`)\r\n            setUser(UserInformation.data)\r\n        }\r\n        getUserInfo()\r\n        \r\n    }, [])\r\n    return (\r\n        <div className = \"user-information-section\">\r\n            <div className =\"user-information-heading\"> \r\n                <h3>User Information</h3>\r\n            </div>\r\n            <div className=\"user-information-display\">\r\n                <ul>\r\n                    <li><FontAwesomeIcon icon = {faUser} className = \"icon\"/>Name: <pre> {User.firstname} {User.lastname}</pre></li>\r\n                    <li><FontAwesomeIcon icon = {faUsers} className = \"icon\"/>Username:<pre> {User.username}</pre></li>\r\n                    <li><FontAwesomeIcon icon = {faEnvelope} className = \"icon\"/>Email:<pre> {User.emailid}</pre></li>\r\n                    <li><FontAwesomeIcon icon = {faCalendar} className = \"icon\"/>DOB:<pre> 23-08-1997</pre></li>\r\n                   \r\n                </ul>\r\n            </div>\r\n            <div className=\"edit-btn\">\r\n                <button>Edit Profile Information</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInformation\r\n","D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\navigation-bar\\userNavbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\navigation-bar\\navbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\contact-us-section\\contact-us.js",[],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\create-post\\create-post.js",["474","475"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\comments\\comment.js",["476"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\components\\comments\\comments-display.js",["477","478","479","480"],"D:\\FYP-Implementation\\40% Implementation\\03\\frontend\\src\\pages\\GroupPage.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\index.js",[],["481","482"],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\App.js",["483","484"],"import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from './pages/homepage'\nimport {Route, Switch, Redirect} from 'react-router-dom'\nimport SignIn from './components/sign-in/signin'\nimport SignUp from './components/sign-up/signup';\nimport UserProfile from './pages/UserProfile';\nimport UserHomePage from './pages/UserHomePage';\nimport GroupPage from './components/groupComponent/GroupPage'\nimport PostPage from './pages/postPage'\nimport EditorPage from './pages/editorPage';\nimport WhiteBoard from './pages/WhiteBoard'\nimport Youtube from './components/youtube/Youtube'\nimport NewMessenger from './components/NewMessenger/Messenger';\nimport JitsiComponent from './components/video-chat-room/JitsiComponent';\n\n\nfunction App() {\n\n    const loggedin = ()=>{\n      if(localStorage.getItem('token') === null){\n        return false;\n      }\n      else{\n        return true\n      }\n     }\n  \n  return (\n    <Switch>\n   {/* <Route exact path = \"/\">\n      {loggedin() ? <Redirect to = \"/home\"/> : <HomePage/>}\n    </Route>\n      <Route exact path = \"/signin\">\n        {loggedin() ? <Redirect to = \"/home\"/> : <SignIn/> }\n      </Route>\n      <Route exact path = \"/signup\">\n        {loggedin() ? <Redirect to = \"/home\"/> : <SignUp/> }\n      </Route>\n      <Route exact path = \"/profile\">\n      {loggedin() ? <UserProfile/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/home\">\n      {loggedin() ? <UserHomePage/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/group/:id\" >\n      {loggedin() ? <GroupPage/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/user/post/:id\">\n      {loggedin() ? <PostPage/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/messenger\">\n      {loggedin() ? <NewMessenger/> : <Redirect to = \"/signin\"/> }\n      </Route>\n\n      <Route exact path = \"/playground\">\n      {loggedin() ? <EditorPage/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/playground/:id\">\n      {loggedin() ? <EditorPage/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/whiteboard\">\n      {loggedin() ? <WhiteBoard/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/youtube\" >\n      {loggedin() ? <Youtube/> : <Redirect to = \"/signin\"/> }\n      </Route>\n      <Route exact path = \"/room/:id\" >\n      {loggedin() ? <JitsiComponent/> : <Redirect to = \"/signin\"/> }\n  </Route>*/}\n  <Route exact path = \"/\" component = {HomePage}/>\n  <Route exact path = \"/signin\" component = {SignIn}/>\n  <Route exact path = \"/signup\" component = {SignUp}/>\n  <Route exact path = \"/profile\" component = {UserProfile}/>\n  <Route exact path = \"/home\" component = {UserHomePage}/>\n  <Route exact path = \"/group/:id\" component = {GroupPage}/>\n  <Route exact path = \"/user/post/:id\" component = {PostPage}/>\n  <Route exact path = \"/messenger\" component = {NewMessenger}/>\n  <Route exact path = \"/playground\" component = {EditorPage}/>\n  <Route exact path = \"/playground/:id\" component = {EditorPage}/>\n  <Route exact path = \"/whiteboard\" component = {WhiteBoard}/>\n  <Route exact path = \"/youtube\" component = {Youtube}/>\n  <Route exact path = \"/room/:id\" component = {JitsiComponent}/>\n\n    </Switch>\n  );\n}\n\nexport default App;\n\n\n\n\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\postPage.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\homepage.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\UserProfile.js",["485","486","487"],"import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport NavigationBar from '../components/navigation-bar/userNavbar'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport Footer from '../components/footer-section/footer'\nimport Post from '../components/post-component/post'\nimport Pagination from '../components/post-component/pagination'\nimport ProfileInformation from '../components/Profile-Information/ProfileInformation'\nimport UserInformation from '../components/Profile-Information/UserInformation'\nimport GroupsDisplay from '../components/groupComponent/groupsDisplayHome'\nimport UserPost from '../components/create-post/create-post'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './UserProfile.css'\n\n\nfunction UserProfile() {\n    \n    const [posts, setPosts] = useState([])\n    const [loading, setLoading] = useState(true);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(3);\n\n    const uid = localStorage.getItem('userid')\n    const [user,setUser] = useState({})\n    useEffect(async()=>{\n        try{\n            const response = await axios.get(`http://localhost:8080/users/${uid}`)\n            setUser(response.data)\n        }catch(err){\n            console.log(err)\n        }\n    },[])\n    useEffect(()=>{\n        const fetchPosts = async ()=>{\n            setLoading(true);\n            const response = await axios.post('http://localhost:8080/posts/user/posts', {\"author\": localStorage.getItem('userid')});\n            setPosts(response.data);\n            setLoading(false)\n        }\n        fetchPosts()\n\n    },[]);\n\n    //Current Posts\n    const lastPostIndex = currentPage * postsPerPage;\n    const firstPostIndex = lastPostIndex - postsPerPage;\n    const currentPosts = posts.slice(firstPostIndex, lastPostIndex)\n    \n\n    const paginate = (pageNumber)=>{\n        setCurrentPage(pageNumber)\n    }\n    return (\n        <div style = {{backgroundColor: '#1c2237', height:\"auto\"}}>\n            <NavigationBar/>\n            \n            <Container fluid className = \"user-information-section\">\n                <Row>\n                    <Col  lg = {3} className = \"demo\">\n                        <UserInformation/>\n                    </Col>\n                        \n                    <Col lg = {6} className = \"demo user-post-section\">\n                        \n                        <div className=\"post-heading\"s style = {{textAlign:'center'}}>\n                            <h2>User Posts</h2>\n                        </div>\n                        <Post posts = {currentPosts} loading= {loading} />\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                        <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate= {paginate}/>\n                        </div>\n                        <UserPost setTotalPosts = {setPosts} posts = {posts}/>\n                      \n                        <GroupsDisplay/>\n                    </Col>\n                    <Col lg = {3} className = \"demo\">\n                        <ProfileInformation/>\n                    </Col>\n                </Row>\n            </Container>\n            <div className=\"footer\" style = {{position:\"relative\"}}>\n                <Footer  />\n            </div>\n            \n            \n        </div>\n    )\n}\n\nexport default UserProfile\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\UserHomePage.js",["488"],"import React, {useState,useEffect} from 'react'\nimport NavigationBar from '../components/navigation-bar/userNavbar'\nimport Footer from '../components/footer-section/footer'\nimport axios from 'axios'\nimport Post from '../components/post-component/post'\nimport SearchPanel from '../components/userSearch/searchPanel'\nimport RecommendedUsers from '../components/recommendations/recommendedUsers'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './UserProfile.css'\n\n\nfunction UserHomePage() {\n    const [posts, setPosts] = useState([])\n    const [loading, setLoading] = useState(false);\n    const uid = localStorage.getItem('userid')\n    \n    useEffect(()=>{\n        const fetchPosts = async ()=>{\n            setLoading(true);\n            const response = await axios.get(`http://localhost:8080/posts/${uid}/get/posts`);\n            setPosts(response.data);\n            setLoading(false)\n        }\n        fetchPosts()\n    }, []);\n    \n    return (\n        <div style ={{backgroundColor: '#1c2237'}}>\n       \n            <NavigationBar/>\n            <div className=\"container-fluid user-home-container\">\n            <div className=\"row\">\n                <div className=\"col-md-3\">\n                    <SearchPanel/>\n                </div>\n                <div className=\"col-md-6 mb-5\">\n                <Post posts = {posts} loading= {loading} />\n                </div>\n                <div className=\"col-md-3\">\n                    <RecommendedUsers/>\n                </div>\n            </div>\n            </div>\n            <Footer/>\n        </div>\n    )\n}\n\nexport default UserHomePage\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\WhiteBoard.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\messenger.js",["489","490","491"],"import React,{useState,useEffect} from 'react'\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport MainChatArea from '../components/messenger/mainchat-area' \nimport SideChatPanel from '../components/messenger/sidechat-panel' \nimport NavigationBar from '../components/navigation-bar/userNavbar'\nimport Footer from '../components/footer-section/footer'\nfunction Messenger({match}) {\n    const uid = localStorage.getItem('userid')\n    const [user,setUser] = useState({})\n    useEffect(async()=>{\n        try{\n            const response = await axios.get(`http://localhost:8080/users/${uid}`)\n            //console.log(response.data)\n            setUser(response.data)\n        }catch(err){\n            console.log(err)\n        }\n        \n\n    },[])\n\n    \n    const chatid =match.params.id \n    return (\n        <div className = \"container-fluid \">\n        <NavigationBar/>\n        <div className=\"container mt-5\" style = {{marginBottom:\"6vh\"}}>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <SideChatPanel />\n                </div>\n                <div className=\"col-md-8\">\n                    <MainChatArea chatid= {chatid}/>\n                </div>\n            </div>\n        </div>\n        <Footer/>\n        </div>\n    )\n}\n\nexport default Messenger\n",["492","493"],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\pages\\editorPage.js",["494"],"import React, {useState, useRef} from 'react'\nimport {Modal, Button} from 'react-bootstrap'\nimport '../components/editor-components/editor.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {useParams} from 'react-router-dom'\nimport NavigationBar from '../components/navigation-bar/userNavbar'\nimport Footer from '../components/footer-section/footer'\nimport Editor from \"@monaco-editor/react\";\nimport OutputSection from '../components/editor-components/outputsection'\nimport VideoSection from '../components/editor-components/videosection'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport axios from 'axios'\nimport ReactCrop from 'react-image-crop'\nimport 'react-image-crop/dist/ReactCrop.css';\n\n\nfunction EditorPage() {\n    const [html,setHtml] = useState('<!-- Write your html here -->')\n    const [css,setCss] = useState('/* Write your css here */')\n    const [js,setJS] = useState('//Write your javascript here')\n    const [tabIndex, setTabIndex] = useState(0);\n    const videoRef = useRef(null)\n    const [image, setImage] = useState()\n    const [crop,setCrop] = useState({\n        aspect: 16/9\n    })\n    const [croppedImage, setCroppedImage] = useState()\n\n    const ArrayBufferToBase64 =  (buffer)=> {\n        var binary = '';\n        var bytes = new Uint8Array(buffer);\n        for (var len = bytes.byteLength, i = 0; i < len; i++) {\n            binary += String.fromCharCode(bytes[i]);\n        }\n        return window.btoa(binary);\n    }\n\n\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    var {id} = useParams()\n\n    const getScreenShot = async ()=>{\n       try{\n        const res = await axios.get('http://localhost:8080/users/get/screenshot', {\n            video:id\n        })\n        const img = await axios.get(res.data.image, {\n            responseType:\"arraybuffer\"\n        })\n     \n       const img64 = await ArrayBufferToBase64(img.data)\n       await setImage(img64)\n       handleShow()\n        \n       }\n       catch(err){\n           console.log(err)\n       }\n    }\n\n    const handleOnCropChange = (crop) =>{\n        console.log(crop)\n        setCrop(crop)\n        \n    }\n\n    function getCroppedImg() {\n        const canvas = document.createElement('canvas');\n        \n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n      \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height,\n        );\n      \n       const base64Image = canvas.toDataURL('image/jpeg');\n       setCroppedImage(base64Image)\n      }\n      const getText = () =>{\n          console.log(\"Hello jee\")\n      }\n\n    return (\n        <div>\n            <NavigationBar />\n            <div className=\"container-fluid\" style = {{margin:\"5vh 0 8vh 0\"}}>\n                \n                        <div className=\"row\">\n                        <div className=\"col-md-6\">\n                        <Tabs selectedIndex={tabIndex} onSelect={index => setTabIndex(index)}>\n                        <TabList>\n                          <Tab style = {{color:\"crimson\", fontSize:\"20px\"}}>HTML</Tab>\n                          <Tab style = {{color:\"crimson\", fontSize:\"20px\"}}>CSS</Tab>\n                          <Tab style = {{color:\"crimson\", fontSize:\"20px\"}}>JavaScript</Tab>\n\n                        </TabList>\n                    \n                        <TabPanel>\n                        <Editor\n                        height=\"84vh\"\n                        defaultLanguage=\"html\"\n                        defaultValue={html}\n                        onChange={value=> {\n                            setHtml(value)\n                        }}\n                        />\n                        </TabPanel>\n                        <TabPanel>\n                        <Editor\n                        height=\"84vh\"\n                        defaultLanguage=\"css\"\n                        defaultValue={css}\n                        onChange={value=> {\n                            setCss(value)\n                        }}\n                        />\n                        </TabPanel>\n                        <TabPanel>\n                        <Editor\n                        height=\"84vh\"\n                        defaultLanguage=\"javascript\"\n                        defaultValue={js}\n                        onChange={value=> {\n                            setJS(value)\n                        }}\n                        />\n                        </TabPanel>\n                      </Tabs>\n                        </div>\n                            <div className=\"col-md-6\">\n                            <button className = \"btn btn-danger\"\n                                onClick = {()=>{\n                                    getScreenShot()\n\n                                }}\n                            >Take Screenshot</button>\n                            <button className = \"btn btn-danger\" onClick = {()=> getText()}>\n                                Get Text\n                            </button>\n                                <div className=\"row\">\n                                    <div className=\"col video-section\" ref = {videoRef} >\n                                        <VideoSection video = {id}  />\n                                    </div>\n\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col output-section\" >\n                                <OutputSection htmlCode = {html} cssCode = {\"<style>\"+css+\"</style>\"} jsCode = {\"<script>\"+js+\"</script>\"}/>\n                                    </div>\n                                </div>\n\n\n                            </div>\n                        </div>\n                    </div>\n                    \n            <Footer />\n\n            <>\n            <Button variant=\"primary\" onClick={handleShow}>\n              Launch demo modal\n            </Button>\n      \n            <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Modal heading</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n              <div>\n                <ReactCrop src ={`data:image/png;base64,${image}`} crop = {crop} onChange = {handleOnCropChange}/>\n                <button className = \"btn btn-danger\" onClick = {()=> getCroppedImg()}> Crop Image</button>\n              </div>\n               \n              </Modal.Body>\n             \n            </Modal>\n          </>\n        </div>\n    )\n}\n\nexport default EditorPage\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\GroupPage.js",["495","496","497","498","499","500","501"],"import React,{useState,useEffect, useRef} from 'react'\nimport axios from 'axios'\nimport NavigationBar from '../navigation-bar/userNavbar'\nimport Footer from '../footer-section/footer'\nimport {useFormik} from 'formik'\nimport * as Yup from 'yup'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Post from '../post-component/post'\nimport './groupsDisplayHome.css'\nimport MemberCard from './memberCard'\nimport Message from '../NewMessenger/message/Message'\nimport AddUserCard from './AddUserCard'\nimport './membercard.css'\nimport {Link} from 'react-router-dom'\nimport {io} from 'socket.io-client'\nimport GroupChannels from '../group-channels/groupChannels'\n\nfunction GroupPage({match}) {\n    const userid = localStorage.getItem('userid')\n    const gid = match?.params.id\n    const [group, setGroup] = useState({})\n    const [user,setUser] = useState({})\n    const[userSearch, setUserSearch] = useState('')\n    const [users, setUsers] = useState([])\n    const [filteredUsers, setFilteredUsers] = useState([])\n    const [groupMembers,setGroupMembers] = useState([])\n    const [groupAdmins,setGroupAdmins] = useState([])\n    const [TotalPosts, setTotalPosts] = useState([]);\n    const [posts,setPosts] = useState([])\n    const [chatid, setChatid] = useState('')\n    const [chat, setChat] = useState({})\n    const socket = useRef()\n    const [arrivalMessage,setArrivalMessage ] = useState(null)\n    const [messages,setMessages ] = useState([])\n    const [newMessage, setNewMessage] = useState('')\n    \n\n    useEffect(()=>{\n        axios.get(`http://localhost:8080/groups/${gid}/`)\n        .then(response=>{\n            setGroup(response.data)\n            setPosts(response.data.posts)\n            setGroupAdmins(response.data.admins)\n            setGroupMembers(response.data.groupMembers)\n            setChatid(response.data.chatid)\n\n        }).catch(err=>{\n            console.log(err)\n        })\n\n      \n    },[])\n\n    useEffect(()=>{\n        axios.get(`http://localhost:8080/users/${userid}/`)\n        .then(res=>{\n            const usersAll = [...res.data.following,...res.data.followers]\n            const unique =  Array.from(new Set(usersAll.map(a=> a._id))).map(id => {\n                return usersAll.find(a=> a._id === id)\n            })\n            setUsers(unique)\n            setUser(res.data)\n        }).catch(err=>{\n            console.log(err)\n        })\n\n        socket.current = io(\"ws://localhost:8080\")\n        socket.current.emit('createRoom', chatid)\n        socket.current.on('getGroupMessage', data=>{\n            setArrivalMessage({\n                sender: data.senderId,\n                text:data.text,\n                createdAt: Date.now()\n            })\n        })\n    },[])\n\n    useEffect(async()=>{\n        try{\n         const res =await  axios.get(`http://localhost:8080/rooms/${chatid}/`)\n         setMessages(res.data.messages)\n         setChat(res.data)\n        }catch(err){\n            console.log(err)\n        }\n     },[])\n    \n\n    useEffect(() => {\n        arrivalMessage && chat?.participants.includes(arrivalMessage.sender) &&\n        setMessages(prev => [...prev, arrivalMessage])\n    }, [arrivalMessage,chat])\n\n    useEffect(()=>{\n        if(users.length !== 0){\n            const result = users.filter(u=> (u.username.includes(userSearch) || u.firstname.includes(userSearch)) && userSearch !== '' )\n            setFilteredUsers(result)\n        }\n    },[userSearch])\n    \n   \n\n    //form validation\n    const initialValues = {\n        title: '',\n        body: '',\n        author: localStorage.getItem('userid'),\n        postType: 'group'\n    }\n\n    const onSubmit = async (values,onSubmitProps) =>{\n        try{\n            const res = await axios.post(`http://localhost:8080/groups/${gid}/posts/create`, values)\n            setTotalPosts([...TotalPosts, res.data.post])\n            onSubmitProps.resetForm()\n        }catch(err){\n            console.log(\"Error:\", err)\n        }\n    }\n\n\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('This field is required..'),\n        body: Yup.string().required('This field is required..')\n    })\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n        validationSchema\n    })\n\n    const handleSubmit =async (e) =>{\n        e.preventDefault()\n        const message = {\n            sender: userid,\n            text:newMessage,\n            chatid\n        }\n        socket.current.emit('groupMessage', {\n            senderId: userid,\n            room: chatid,\n            text:newMessage\n        })\n        try{\n            const res = await axios.post(`http://localhost:8080/rooms/${chatid}/message/new`,message)\n            setMessages([...messages],res.data.message)\n            setNewMessage('')\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    const checkAdmin = () =>{\n        const found = groupAdmins.filter(g=> g.toString() === userid)\n        if(found.length > 0){\n            return true\n        }else{\n            return false\n        } \n    }\n    return (\n        <div className = \"container-fluid bottom-margin\">\n        <NavigationBar/>\n            <div className=\"row mt-4\">\n                <div className=\"col-md-3\">\n                    <div className=\"container group-info\">\n                        <h3>Group information</h3>\n                        <h5>Title: {group?.title}</h5>\n                        <h5>Description: <small>{group?.description}</small></h5>\n                    </div>\n                    <div className=\"container create-post mt-5\">\n                         <h3>Create post</h3>\n                         <form onSubmit = {formik.handleSubmit}>\n                         <div className=\"row\">\n                         <div className=\"col post-heading\">\n                             <label htmlFor=\"postheading\">Post Heading:</label>\n                             <input type=\"text\" name=\"title\" id=\"inputBackground\" style = {{width: \"100%\"}}\n                                 placeholder =\"Enter the post title...\"\n                                 onChange = {formik.handleChange}\n                                 onBlur = {formik.onBlur}\n                                 value = {formik.values.title}\n                             />\n                             {formik.errors.title && formik.touched.title ? <div style = {{color: 'crimson'}}><p>{formik.errors.title}</p></div> : null}\n                         </div>\n                         </div>\n                         <div className=\"row\">\n                         <div className=\"col\">\n                             <div className=\"post-body\">\n                                 <label htmlFor=\"body\">Post Body: </label>\n                                 <textarea name=\"body\" id=\"inputBackground\" rows=\"6\" \n                                 placeholder = \"Enter the post description....\"\n                                 onChange = {formik.handleChange}\n                                 onBlur = {formik.onBlur}\n                                 value = {formik.values.body}\n                                 />\n                                 {formik.errors.body && formik.touched.body ? <div style = {{color: 'crimson'}}><p>{formik.errors.body}</p></div> : null}\n                             </div>\n                             </div>\n                         </div>\n                         <div className=\"add-post-button\">\n                             <button type = \"submit\" className = \"btn btn-danger mb-3\">Add Post!</button>\n                         </div>\n                         </form>\n                    </div>\n                    <div className=\"container-fluid channels mt-5\">\n                    <h3>Video Channels</h3>\n                        <GroupChannels id = {gid}/>\n                    </div>\n                  \n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"container group-posts\">\n                        <h3 className=\"mb-4 ml-3 \">Group Posts</h3>\n                        <Post posts = {posts}/>\n                    </div>\n                </div>\n                <div className=\"col-md-3\">\n                <h5 style = {{color:\"white\"}}>Group Members</h5>\n                    <div className=\"container members-section \" style = {{overflowY:\"scroll\"}}>\n                        \n                        \n                            {\n                                groupMembers.map(\n                                    u=>(\n                                        groupMembers.length > 0 ? <MemberCard user = {u} groupid = {gid}/> : <li>No users</li>\n                                    )\n                                )\n                            } \n                        {\n                            checkAdmin ? <div class=\"input-group mb-3\">\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Search user..\"\n                                value = {userSearch}\n                                onChange = {e=> setUserSearch(e.target.value)}\n                            />\n                          </div> : null\n                        }\n                          <div className=\"users-search\">\n                            {\n                                filteredUsers.map(u => (\n                                    filteredUsers.length > 0 ? <AddUserCard user  = {u} groupid = {gid}/> : <div>No users found</div>\n                                ))\n                            }\n                          </div>\n                    </div>\n                    <div className=\"container admins mt-3\">\n                        <h5>Group Admins</h5>\n                        {\n                            groupAdmins.map(\n                                u=>(\n                                    groupAdmins.length > 0 ? <MemberCard user = {u}/> : <div>No users</div>\n                                )\n                            )\n                        }\n                            \n                    </div>\n                   <div className=\"groupChatWrapper\">\n                   <h5 style ={{textAlign:\"center\", color:\"white\"}} className = \"mt-3\">Group Chat</h5>\n                   <div className=\"container group-chat mt-3\">\n                \n                      <div className=\"messages\">\n                      {\n                          messages?.map(\n                              m=>(\n                                  messages.length > 0 ? <Message message = {m} own = {m.sender.toString() === userid}/> : <div>No messages in chat</div>\n                              )\n                          )\n                      }\n                      </div>\n                     \n               </div>\n               <div className=\"sendMessage\">\n               <div class=\"input-group mt-3 mb-1\">\n               <input type=\"text\" class=\"form-control\" placeholder=\"New Message..\"\n               value = {newMessage}\n               onChange=  {e=> setNewMessage(e.target.value)}/>\n               <div class=\"input-group-append\">\n                 <button className = \"btn btn-danger\" onClick = {(e)=> handleSubmit(e)}>Send</button>\n               </div>\n                </div>\n               </div>\n                   </div>\n                </div>\n                \n            </div>\n            <Footer/>\n        </div>\n    )\n}\n\nexport default GroupPage\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\sign-in\\signin.js",["502"],"import React, { useState } from 'react'\nimport './signin.css'\nimport NavigationBar from '../../components/navigation-bar/navbar'\nimport Footer from '../../components/footer-section/footer'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap'\nimport { useFormik } from 'formik'\nimport * as Yup from 'yup'\nimport { Link, useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport {toast } from 'react-toastify'\n\nfunction SignIn() {\n    toast.configure()\n    const history = useHistory();\n    const signedIn = (message) =>{\n        \n            toast.success(message, {\n                position:\"top-center\",\n                autoClose:2000,\n                hideProgressBar:true,\n                pauseOnHover:true,\n                closeOnClick:true\n            })\n        \n    }\n\n    const wrongCredentials = (message)=>{\n        toast.error(message, {\n            position:\"top-center\",\n            autoClose:2000,\n            hideProgressBar:true,\n            pauseOnHover:true,\n            closeOnClick:true\n        })\n    }\n\n\n    const [loggedIn, setLoggedIn] = useState(false)\n    const initialValues = {\n        username: '',\n        password: ''\n    }\n\n    const onSubmit = async (values, onSubmitProps) => {\n        try{\n            const response = await axios.post('http://localhost:8080/users/login', values)\n            if (response.status === 200) {\n              \n                const storage = localStorage;\n                signedIn(response.data.message)\n                setLoggedIn(true)\n                storage.setItem('userid', response.data.userid)\n                storage.setItem(\"token\", response.data.token)\n                storage.setItem(\"username\", response.data.username)\n                onSubmitProps.resetForm()\n                history.push('/home')\n            }\n           \n        }catch(err){\n            wrongCredentials(\"Invalid credentials\")\n            onSubmitProps.resetForm()\n            console.log(err)\n        }\n       \n    }\n\n\n\n    const validationSchema = Yup.object({\n        password: Yup.string().required('This field is required..'),\n        username: Yup.string().required('This field is required..')\n    })\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n        validationSchema\n    })\n    return (\n        <div className=\"main-body\">\n            <NavigationBar />\n            <Container className=\"signin-container\">\n                <Row className=\"signin-row\">\n                    <Col sm={6}>\n                        <div className=\"signin-form-section signin\">\n                            <Form onSubmit={formik.handleSubmit}>\n                                <h3 className=\"text-light text-center\">Log into your account!</h3>\n\n\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label className=\"text-light\">Enter your username:</Form.Label>\n                                    <Form.Control type=\"text\"\n                                        name=\"username\"\n                                        id=\"username\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.username} />\n                                    {formik.errors.username && formik.touched.username ? <div ><p style={{ color: 'crimson' }}>{formik.errors.username}</p></div> : null}\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label className=\"text-light form-label\">Enter your password:</Form.Label>\n                                    <Form.Control type=\"password\" name=\"password\" id=\"password\" value={formik.values.password}\n                                        onChange={formik.handleChange}\n                                        onBlue={formik.handleBlur}\n\n                                    />\n                                    {formik.errors.password && formik.touched.password ? <div ><p style={{ color: 'crimson' }}>{formik.errors.password}</p></div> : null}\n                                </Form.Group>\n                                <Row>\n                                    <Col md={6} >\n                                        <Form.Group controlId=\"formBasicCheckbox\" >\n                                            <Form.Check type=\"checkbox\" label=\"Remember Me.\" className=\"text-light\" name=\"toggle\"\n                                                onChange={formik.handleChange}\n                                                value={formik.values.toggle}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col md={6}>\n                                        <Link style={{ color: 'white', textDecoration: 'none' }}>Forgot password?</Link>\n\n                                    </Col>\n\n                                </Row>\n\n\n                                <Row className=\"login-btn\">\n                                    <Button variant=\"primary\" type=\"submit\">Log In</Button>\n                                </Row>\n                            </Form>\n                        </div>\n                    </Col>\n                    <Col sm={6} className=\"signin\">\n                        <img src=\"/images/signin.svg\" alt=\"\" />\n                    </Col>\n\n                </Row>\n            </Container>\n            <Footer />\n        </div>\n    )\n}\n\nexport default SignIn\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\sign-up\\signup.js",["503"],"import React, { useState } from 'react'\nimport './signup.css'\nimport { useHistory } from 'react-router-dom'\nimport NavigationBar from '../../components/navigation-bar/navbar'\nimport Footer from '../../components/footer-section/footer'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './signup.css'\nimport { useFormik } from 'formik'\nimport { Form } from 'react-bootstrap'\nimport * as Yup from 'yup'\nimport axios from 'axios'\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction SignUp(props) {\n    //Toast setting\n    toast.configure()\n    const signedUp = (message) => {\n        toast.success(message, {\n        });\n    }\n\n    const [redirect, setRedirect] = useState(false)\n\n    const initialValues = {\n        firstname: '',\n        lastname: '',\n        emailid: '',\n        username: '',\n        password: '',\n        dob: '',\n        profileImage:'/images/Dp.svg'\n       \n\n    }\n    const onSubmit = (values, onSubmitProps) => {\n        // setRedirect(true);\n        axios.post('http://localhost:8080/users/register', values)\n            .then((res) => {\n                signedUp(res.data)\n            })\n            .catch(err => { console.log('Error: ' + err) });\n        onSubmitProps.resetForm()\n\n    }\n    let history = useHistory();\n    function redirectUser() {\n        if (redirect) {\n            history.push('/sign-in');\n        }\n    }\n\n    const validationSchema = Yup.object({\n        firstname: Yup.string().required('This field is required..'),\n        lastname: Yup.string().required('This field is required..'),\n        emailid: Yup.string().email('Enter a valid email address..').required('This field is required..'),\n        username: Yup.string().required('This field is required..'),\n        password: Yup.string().required('This field is required..'),\n        dob: Yup.string().required('This field is required..'),\n        // confirmpassword: Yup.string().required('This field is required..').when(\"password\", {\n        //     is:val => (val && val.length > 0 ? true : false),\n        //     then : Yup.string().oneOf([Yup.ref(\"password\")], \"Value must match the entered password..\")\n        // })\n    })\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n        validationSchema\n    })\n\n    return (\n        <div className=\"main-body\">\n            <NavigationBar />\n            <div className=\"container signin-container\">\n                <div className=\"row signin-row\">\n                    <div className=\"col-sm-8\" style={{ padding: '0' }}>\n                        <div className=\"signup-form-section signup\">\n                            <form onSubmit={formik.handleSubmit}>\n                                <h3 className=\"text-light text-center\">\n                                    Sign Up For Your Account!\n                                    </h3>\n                                <div className=\"row section-divider\">\n\n                                    <div className=\"col-lg-6 \">\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label className=\"text-light\">First Name:</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"firstname\"\n                                                id=\"firstname\"\n                                                className=\"form-controller\"\n                                                placeholder=\"Enter first name..\"\n                                                onChange={formik.handleChange}\n                                                value={formik.values.firstname}\n                                                onBlur={formik.handleBlur}\n                                            />\n                                            {formik.errors.firstname && formik.touched.firstname ? <div className=\"error\"><p>{formik.errors.firstname}</p></div> : null}\n                                        </Form.Group>\n                                    </div>\n\n                                    <div className=\"col-lg-6\">\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label className=\"text-light\">Last Name:</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"lastname\"\n                                                id=\"lastname\"\n                                                placeholder=\"Enter last name..\"\n                                                className=\"form-controller\"\n                                                onChange={formik.handleChange}\n                                                value={formik.values.lastname}\n                                                onBlur={formik.handleBlur}\n\n                                            />\n                                            {formik.errors.lastname && formik.touched.lastname ? <div className=\"error\"><p>{formik.errors.lastname}</p></div> : null}\n                                        </Form.Group>\n                                    </div>\n\n\n                                </div>\n\n\n\n                                <div className=\"row section-divider\">\n\n\n\n                                    <div className=\"col-lg-6 \">\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label className=\"text-light\">Email ID:</Form.Label>\n                                            <Form.Control\n                                                type=\"email\"\n                                                name=\"emailid\"\n                                                id=\"emailid\"\n                                                placeholder=\"yourname@example.com\"\n                                                className=\"form-controller\"\n                                                onChange={formik.handleChange}\n                                                value={formik.values.emailid}\n                                                onBlur={formik.handleBlur}\n                                            />\n                                              {formik.errors.emailid && formik.touched.emailid ? <div className=\"error\"><p>{formik.errors.emailid}</p></div> : null}\n                                        </Form.Group>\n                                    </div>\n\n\n\n\n\n\n                                    <div className=\"col-lg-6 \">\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label className=\"text-light\">Username:</Form.Label>\n                                            <Form.Control\n                                              type=\"text\" name=\"username\" id=\"username\" placeholder=\"example123\" className=\"form-controller\"\n                                              onChange={formik.handleChange}\n                                              value={formik.values.username}\n                                              onBlur={formik.handleBlur}\n                                            />\n                                              {formik.errors.username && formik.touched.username ? <div className=\"error\"><p>{formik.errors.username}</p></div> : null}\n                                        </Form.Group>\n                                    </div>\n                                </div>\n\n\n\n                                <div className=\"row section-divider\">\n\n\n                                    <div className=\"col-lg-6 \">\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label className=\"text-light\">Enter Password:</Form.Label>\n                                            <Form.Control\n                                             type=\"password\" name=\"password\" id=\"password\" className=\"form-controller\"\n                                             onChange={formik.handleChange}\n                                             value={formik.values.password}\n                                             onBlur={formik.handleBlur}\n                                            />\n                                             {formik.errors.password && formik.touched.password ? <div className=\"error\"><p>{formik.errors.password}</p></div> : null}\n                                        </Form.Group>\n                                    </div>\n\n\n\n\n\n\n\n                                    <div className=\"col-lg-6 \">\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label className=\"text-light dob\">First Name:</Form.Label>\n                                            <Form.Control\n                                              type=\"date\" name=\"dob\" id=\"dob\" className=\"form-controller\"\n                                              onChange={formik.handleChange}\n                                              value={formik.values.dob}\n                                              onBlur={formik.handleBlur}\n                                            />\n                                             {formik.errors.dob && formik.touched.dob ? <div className=\"error\"><p>{formik.errors.dob}</p></div> : null}\n                                        </Form.Group>\n                                    </div>                    \n                                </div>\n\n\n\n                                <div className=\"login-btn\">\n                                    <button type=\"submit\" className=\"btn btn-danger\" onClick={redirectUser()}>Submit</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-4 signup\">\n                        <img src=\"/images/signup.svg\" alt=\"sign in\" />\n                    </div>\n                </div>\n            </div>\n            <Footer />\n        </div>\n    )\n}\n\nexport default SignUp","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\groupsDisplayHome.js",["504"],"import React,{useState, useEffect} from 'react'\nimport {Modal,Button} from 'react-bootstrap'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport './groupsDisplayHome.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction GroupsDisplay() {\n    const userid = localStorage.getItem('userid')\n    const [groups,setGroups] = useState([])\n\n    //group creation state\n    const [title,setTitle] = useState('')\n    const [description,setDescription]= useState('')\n\n    //Modal\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    useEffect(async() => {\n        try{\n            const response =await axios.get(`http://localhost:8080/users/${userid}/groups`)\n            setGroups(response.data.groups)\n        }catch(Err){\n            console.log(Err)\n        }\n        \n    },[userid])\n\n    const handleSubmit =async () =>{\n        if(title === '' || description === ''){\n            return window.alert(\"Enter title and description first\")\n        }\n        try{\n            const response = axios.post(`http://localhost:8080/groups/create/${userid}`,{\n            title,\n            description\n        })\n\n        console.log(response.data)\n\n        }catch(err){\n            console.log(err)\n        }\n    }\n\n\n    return (\n        <div style = {{color:\"white\", marginBottom:\"10vh\"} } className  = \"groups-main-container container\">\n            <div className=\"main-heading\">\n                <h4>Your Groups</h4>\n                {groups?.length > 0 ? (\n                    groups.map((g,i)=>(\n                        <div className = \"text-crimson\"><Link to = {`/group/${g._id}`}>\n                            <div className=\"group-container\">\n                                <h5>{`${i+1}) ${g.title}`}</h5>\n                                <div className=\"group-description\">{g.description}</div>\n                            </div>\n                        </Link></div>\n                    ))\n                ) : <div className = \"text-crimson\">You have not joined any groups yet... <span className = \"Create-Group\" onClick= {handleShow}>Create new group?</span></div> }\n                <div style = {{textAlign:\"center\"}}><button className = \"btn btn-danger\" onClick = {handleShow}>Create New Group?</button></div>\n                 \n            </div>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                <Modal.Title>Create New Group!</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Enter the required credentials for creating a group:\n                    <form>\n                        <div class=\"form-group\">\n                        <label for=\"exampleInputEmail1\">Group Title:</label>\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Title...\"\n                            value = {title}\n                            onChange = {(e)=> setTitle(e.target.value)}\n                        />\n                        </div>\n                        <div class=\"form-group\">\n                        <label for=\"exampleInputPassword1\">Description</label>\n                        <textarea rows= \"6\" type=\"text\" class=\"form-control\" placeholder=\"Enter group description i.e what the group is about\"\n                        value = {description}\n                        onChange = {(e)=> setDescription(e.target.value)}\n                        />\n                        </div>\n                        <small id=\"emailHelp\" class=\"form-text text-muted\">Adding/Removing users will be available once the group is created</small>\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"danger\" onClick={handleSubmit}>\n                    Create!\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nexport default GroupsDisplay\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\post-component\\pagination.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\post-component\\post.js",["505","506","507","508","509","510"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport Axios from 'axios'\nimport Tippy from '@tippy.js/react'\nimport { faThumbsUp, faComment, faTrash, faEdit, faExclamation } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios'\nimport { Modal, Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './post.css'\nimport 'tippy.js/dist/tippy.css'\nimport {toast} from 'react-toastify'\nimport {SRLWrapper} from 'simple-react-lightbox'\n\nconst radioOptions = [\n  'Violence',\n  \"Harassment\",\n  'False Information',\n  \"Spam\",\n  \"Hate Speech\",\n  \"Other\"\n]\n\nfunction Post({ posts, loading }) {\n  const images = [\n    {\n      source:\"/images/background.jpg\"\n    },\n    {\n      source:\"/images/background.jpg\"\n    },\n    {\n      source:\"/images/background.jpg\"\n    }\n  ]\n  const [open, setOpen] = useState(false)\n\n  const toggleModal = () => setOpen(!open)\n\n\n\n  toast.configure()\n  const liked = (response)=>{\n\n    if(response === 'Post Unliked'){\n      toast.error(response, {\n        position:\"top-center\",\n        autoClose:3000,\n        hideProgressBar:true,\n        pauseOnHover:true,\n        closeOnClick:true\n    })\n    }\n    else{\n      toast.success(response, {\n        position:\"top-center\",\n        autoClose:3000,\n        hideProgressBar:true,\n        pauseOnHover:true,\n        closeOnClick:true\n    })\n    }\n    \n  }\n\n  const userid = localStorage.getItem('userid')\n  \n\n  //Handle close/open Modal\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true)\n  const [title,setTitle] = useState('')\n  const [body,setBody] = useState('')\n\n  //report modal\n  const [showReport, setShowReport] = useState(false);\n  const closeReport = () => setShowReport(false);\n  const openReport = () => setShowReport(true)\n\n  const [reason, setReason] = useState('')\n  const [reasonDescription,setReasonDescription] = useState('')\n\n\n  const checkLike =async (postid) => {\n    try{\n      const response = await axios.post(`http://localhost:8080/posts/${postid}/like`, {userid})\n      liked(response.data.message)\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n\n  const DeletePost = (postid) => {\n    const choice = window.confirm(\"Are you sure you want to delete this post?\")\n    if (choice) {\n      Axios.delete(`http://localhost:8080/posts/delete/${postid}`)\n        .then(res => {\n          window.alert(\"Post Deleted\");\n\n          console.log(res.data)\n        })\n        .catch(err => { console.log(err) })\n    } else {\n      return null\n    }\n\n  }\n\n  const editPost =async (id)=>{\n      try{\n        const response = await axios.post(`http://localhost:8080/posts/update/${id}`, {\n          title,body\n        })\n        console.log(response.data)\n      }catch(err){\n        console.log(err)\n      }\n  }\n\n  if (loading) {\n    return <h2>Loading...</h2>\n  }\n  return (\n    <div className=\"container-fluid posts-section\">\n    \n      {\n        posts.length > 0 ?\n          (posts.map(post => (\n            \n            <div key={post._id} className=\"post-container container\" >\n              <div className=\"row user-info-row\">\n                <div className=\"col-md-8\">\n                  <span className=\"user-heading\">User:</span> <span>{post.author.username}</span>\n                </div>\n                <div className=\"col-md-4\" style = {{paddingRight:\"0\"}}>\n                {post.author._id?.toString() === localStorage.getItem('userid') ?\n                  <div className = \"icons-row\"> \n                      <span className = \"icons-post\" onClick = {()=> DeletePost(post._id)}><FontAwesomeIcon icon={faTrash}  /> Delete</span>\n                    <span className = \"icons-post\" onClick = {handleShow}><FontAwesomeIcon icon={faEdit}  /> Edit</span>\n                    \n                  </div>\n                  :\n                  <span className = \"icons-post\" onClick = {openReport}><FontAwesomeIcon icon={faExclamation}/> Report</span>\n                }\n              </div>\n              </div> \n              <div className=\"row\" style={{ justifyContent: \"space-between\" }}>\n                <div className=\"col-md-6\">\n                  <div className=\"post-heading-section\">\n                    <h4>{post.title}</h4>\n                  </div>\n                </div>\n                <div className=\"col-md-3\">\n\n                <pre><strong>Created:</strong>{moment(post.createdAt).fromNow()}</pre>\n                </div>\n               \n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"post-body\">\n                    <p>{post.body}</p>\n              {/*<SRLWrapper>\n                    <div className=\"post-image\">\n                    <img src=\"/images/background.jpg\" alt=\"\" />\n                    </div>\n                    <div className=\"post-image\">\n                    <img src=\"/images/background.jpg\" alt=\"\" />\n                    </div>\n              </SRLWrapper>*/} \n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-6 like-icons-row\">\n                  <Tippy content={`${post.likes.length} ${post.likes.length > 1 ? ('Likes') : ('Like')}`}><Link><FontAwesomeIcon icon={faThumbsUp} onClick={() => checkLike(post._id)} className='disliked' /></Link></Tippy>\n                  <Tippy content={`${post.comments.length} ${post.comments.length > 1 ? ('Comments') : ('Comment')}`}><Link to={`/user/post/${post._id}`}><FontAwesomeIcon icon={faComment} /></Link></Tippy>\n                </div>\n\n              </div>\n              <>\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n          <Modal.Title>Edit Post</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form>\n            <div class=\"form-group\">\n              <label for=\"exampleInputEmail1\">Title</label>\n              <input type=\"text\" class=\"form-control\" placeholder= \"title\"\n                value = {title}\n                onChange = {e=> setTitle(e.target.value)}\n              />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"exampleInputPassword1\">Body</label>\n              <textarea class=\"form-control\" id=\"postbody\" placeholder=\"Body\"\n              value = {body}\n              onChange = {e=> setBody(e.target.value)}\n              />\n            </div>\n            <Button type=\"submit\" variant=\"danger\" onClick = {()=> editPost(post._id)}>\n              Save Changes\n            </Button>\n            </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"warning\" onClick={handleClose}>\n                Close\n              </Button>\n            </Modal.Footer>\n          </Modal>\n          \n      </>\n\n      <>\n      <Modal show={showReport} onHide={closeReport}>\n      <Modal.Header closeButton>\n      <Modal.Title>Report Post</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n      <h5>Select a reason: </h5>\n              <div className=\"wrapperRadios\">\n                  {\n                    radioOptions.map(o=>(\n                      <div className=\"radioItem\">\n                      <input type = \"radio\" name = \"reasonRadio\" value = {o} onClick = {(e)=> {\n                        setReason(e.target.value)\n                      }}/>\n                      <label style = {{marginLeft:\"10px\"}}>{o}</label>\n                      </div>\n                    ))\n                  }\n              </div>\n              <div className=\"reason\">\n              <br/>\n              <h5>Describe reason for reporting</h5>\n                  <textarea name=\"reportReason\" id=\"reportReason\" cols=\"50\" rows = \"3\" className = \"reportReason\" onChange = {(e)=> setReasonDescription(e.target.value)}></textarea>\n              </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={closeReport} >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </>\n\n\n            </div>\n          ))\n          ) : <div className=\"container post-container\" style={{ color: \"crimson\" }}>NO POSTS TO SHOW</div>\n      }\n      \n\n\n    </div>\n  )\n}\n\nexport default Post\n\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\editor-components\\outputsection.js",["511"],"import React from 'react'\n\nfunction OutputSection(props) {\n    var combinedCode = props.htmlCode+props.cssCode+props.jsCode\n    const [key,setkey] = React.useState(0)\n    setInterval(() => {\n        setkey(key+1)\n    }, 3000);\n    return (\n        <>\n            <iframe srcDoc={combinedCode} frameborder=\"0\" width = \"100%\" height = \"100%\"></iframe>\n        </>\n    )\n}\n\nexport default OutputSection\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\editor-components\\videosection.js",["512","513","514"],"import React, {useRef} from 'react'\nimport YouTube from 'react-youtube'\n\nfunction VideoSection({video}) {\n\n    const videoRef = useRef(null)\n    return (\n       <>\n       \n       <div className = \"video-iframe\">\n       {video === undefined ? <h3>Select a youtube video to play here</h3> : <iframe \n        src={`https://www.youtube.com/embed/${video}`}\n        style = {{border:'1px solid white', width :\"100%\",height:'100%'}}\n        allowFullScreen>\n        </iframe>\n    }\n   </div>\n       </>\n    )\n}\n\nexport default VideoSection\n\n\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\navigation-bar\\userNavbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\navigation-bar\\navbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\comments\\comment.js",["515"],"import React from 'react'\nimport {Formik, useFormik} from 'formik'\nimport * as Yup from 'yup'\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './comment.css'\nfunction PostComment({postid}) {\n    const initialValues = {\n        userid: localStorage.getItem('userid'),\n        body: ''\n    }\n    const validationSchema = Yup.object({\n        body: Yup.string().required('This field is required..')\n    })\n\n   \n    const onSubmit = (values, onSubmitProps) =>{\n         axios.post(`http://localhost:8080/posts/${postid}/comment/add`,values)\n         .then(res => {      \n             console.log(res.data)\n         })\n         .catch(err => console.log(err))\n        onSubmitProps.resetForm()\n    }\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n        validationSchema\n    });\n\n\n\n    return (\n        <div>\n            <div className =\"container\" style ={{borderTop:\"1px solid white\", padding: \"15px 0\"}}>\n            <form onSubmit = {formik.handleSubmit}>\n                    <label htmlFor=\"comment\">Add a comment: </label>\n                    <input type=\"text\" className = \"form-control comment-input\" name = \"body\" id = \"body\"\n                    value = {formik.values.body} \n                    onChange = {formik.handleChange}\n                    onBlur = {formik.handleBlur}\n                    />\n                    {formik.errors.body && formik.touched.body ? <div ><p style = {{color: 'crimson'}}>{formik.errors.body}</p></div> : null}\n                    <div className=\"comment-btn text-right\" style = {{marginTop:\"8px\"}}>\n                        <button className = \"btn btn-danger\" type = 'submit'>Comment</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default PostComment\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\footer-section\\footer.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\comments\\comments-display.js",["516"],"import React,{useState,useEffect} from 'react'\nimport moment from 'moment'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './comment.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash, faEdit } from '@fortawesome/free-solid-svg-icons'\nimport {Button, Modal} from 'react-bootstrap'\nimport axios from 'axios'\nfunction DisplayComments(props) {\n    const [comments,setComments] = useState([])\n    const [commentValue, setCommentValue] = useState('')\n    useEffect(()=>{\n        axios.get(`http://localhost:8080/posts/${props.comments}/comments`)\n        .then(c=>{\n            setComments(c.data)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    })\n\n    const deleteComment =async (id) =>{\n        const option = window.confirm(\"Are you sure you want to delete this comment?\")\n        if(option){\n            axios.post(`http://localhost:8080/posts/${id}/comment/delete`)\n            .then(res=>{\n                console.log(res.data)\n               \n               \n            })\n            .catch(err=> console.log(err))\n        }else{\n            return null\n        }\n    }\n\n    const editComment =async (id) =>{\n        try{\n            const response = await axios.post(`http://localhost:8080/posts/${id}/comment/update`,{comment:commentValue})\n            console.log(response.data)\n            setCommentValue('')\n            handleClose()\n\n        }catch(err){\n            console.log(err)\n        }\n    }\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    return (\n        <div className=\"display-comments hs\">\n            <p> <b>Comments: </b> </p>\n            {\n                comments.length > 0 ? (comments.map(comment => (\n                    <div className=\"container\" key = {comment._id} style = {{borderBottom:\"1px solid black\", margin:\"20px 0 10px 0px\"}}>\n                        <div className=\"row\">\n                            <div className=\"col-md-6\">\n                                <div className=\"post-heading-section\">\n                                    <p> <b>Username: {comment.userid.username}</b></p>\n                                </div>\n                            </div>\n                            <div className=\"col-md-3 mm\">\n                               <small>Created:{moment(comment.createdAt).fromNow()}</small> \n                            </div>\n                            <div className=\"col-md-3 mm\">\n                            <small>\n                            <span className = \"icons-post\" onClick ={()=> deleteComment(comment._id)}><FontAwesomeIcon icon={faTrash}  /> Delete</span>\n                            <span className = \"icons-post\" onClick = {handleShow}><FontAwesomeIcon icon={faEdit}  /> Edit</span>\n                            </small>\n                            </div>\n\n\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <p>{comment.body}</p>\n\n                            </div>\n                            <>\n                            <Modal show={show} onHide={handleClose}>\n                              <Modal.Header closeButton>\n                                <Modal.Title>{comment.userid.username.toUpperCase()}</Modal.Title>\n                              </Modal.Header>\n                              <Modal.Body>\n                              <label>Comment:</label>\n                              <input type=\"text\" className = \"form-control comment-input\" name = \"body\" id = \"body\"\n                              value = {commentValue}\n                              onChange = {(e)=> setCommentValue(e.target.value)}\n                              />\n                              </Modal.Body>\n                              <Modal.Footer>\n                                <Button variant=\"danger\" onClick={()=>editComment(comment._id)}>\n                                  Save Changes\n                                </Button>\n                              </Modal.Footer>\n                            </Modal>\n                          </>\n                        </div>\n                        {/* <div className=\"comment-side\">\n                                <pre><strong>{comment.username}:</strong> </pre>\n                                <p> {comment.body}</p>\n\n                            </div>\n                            <div className=\"created-side\">\n                                <pre><strong>Created: </strong> {moment(comment.createdAt).fromNow()}</pre>\n                            </div> */}\n\n                    </div>\n                ))) : <div>No Comments yet..</div>\n            }\n       \n        </div>\n    )\n}\n\nexport default DisplayComments\n\n{/*useEffect(async()=>{\n    try{\n        if(props.comments.length > 0){\n            setComments(props.comments)\n        }\n    }catch(err){\n\n    }\n        \n    //     if(props.postid){\n    //         const response =await Axios.get(`http://localhost:8080/posts/${props.postid}/comments`)\n    //         response.then(res=> {\n    //         setComments(res.data)\n    //     }).catch(err=> console.log(err))\n    //     }else{\n            \n    //     }  \n    // }catch(err){\n    //     console.log(err)\n    // }\n    \n},[])*/}","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\teams-section\\team.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\contact-us-section\\contact-us.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\description-section\\HeroSection.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\Profile-Information\\ProfileInformation.js",["517","518","519","520","521","522"],"import React,{useState,useEffect} from 'react'\nimport {Modal, Button} from 'react-bootstrap'\nimport '../../pages/UserProfile.css'\nimport {FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit, faThumbsUp} from '@fortawesome/free-solid-svg-icons'\nimport UserCard from './usercard'\nimport {Link } from 'react-router-dom'\nimport axios from 'axios'\nimport FollowCard from '../follow-card/followcard'\nimport {Tabs, Tab, Badge} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction ProfileInformation() {\n    const [followers, setFollowers] = useState([])\n    const [following, setFollowing] = useState([])\n    const [posts, setPosts] = useState([])\n\n\n    //Users modal\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    const userid = localStorage.getItem('userid')\n    useEffect(()=>{\n        //Get user posts\n        axios.post('http://localhost:8080/posts/user/posts', {author: localStorage.getItem('username')})\n        .then(posts=> {\n            setPosts(posts)\n        })\n        .catch(err => console.log(err))\n\n        //get following and followers\n        axios.get(`http://localhost:8080/users/${userid}/getall`)\n        .then(res=> {\n            setFollowers(res.data.followers)\n            setFollowing(res.data.following)\n        })\n        .catch(err=> console.log(err))\n    },[])\n\n \n    return (\n        <div className=\"user-info\">\n            <div className=\"user-heading\"> \n                <h3>Profile Information</h3>\n            </div>\n            <div className=\"information-section\">\n                <ul>\n                    <li><Link><FontAwesomeIcon icon = {faEdit} className = \"icon\"/>Posts <Badge variant=\"info\">2</Badge></Link></li>\n                    <li><Link><FontAwesomeIcon icon = {faThumbsUp} className = \"icon\"/>Likes <Badge variant=\"info\">7</Badge></Link></li>\n                </ul>\n                <div className=\"followers-following-section\">\n                    <Tabs defaultActiveKey=\"home\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"home\" title=\"Followers\" style = {{overflowY:\"scroll\",height:\"40vh\"}}>\n                        <ol style = {{color:\"white\"}} className = \"follower-section\">\n                        {\n                            followers.length > 0 ? (\n                                followers.map(f=>(\n                                    <FollowCard user = {f}/>\n                                ))\n                            ) : <div className = \"no-followers\">You do not have any followers :(</div>\n                        }\n                    </ol>\n                        \n                        </Tab>\n                        <Tab eventKey=\"profile\" title=\"Following\" style = {{overflowY:\"scroll\",height:\"40vh\"}}>\n                            <ol style = {{color:\"white\"}}  className = \"follower-section\">\n                            {\n                                following.length > 0 ? (\n                                    following.map(f=>(\n                                        <FollowCard user = {f}/>\n                                    ))\n                                ) : <div className = \"no-followers\">You are not following anyone </div>\n                            }\n                            </ol>\n                        </Tab>\n                    </Tabs>\n                </div>\n            </div>\n            \n            <>\n                <Modal>\n                    <UserCard/>\n                </Modal>\n            </>\n            \n        </div>\n    )\n}\n\nexport default ProfileInformation\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\Profile-Information\\UserInformation.js",["523","524","525"],"import { faUser, faEnvelope, faCalendar, faUsers } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Modal, Button, Card, ListGroup, OverlayTrigger,Tooltip } from 'react-bootstrap'\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useFormik } from 'formik'\nimport * as Yup from 'yup'\nimport moment from 'moment'\nimport './UserInformation.css'\nimport { faEdit} from '@fortawesome/free-solid-svg-icons'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport UserInterests from '../interests/UserInterests'\nimport {toast } from 'react-toastify'\n\n\nfunction UserInformation() {\n\n    toast.configure()\n    const AddedLanguage = (message)=>{\n        toast.success(message, {\n            position:\"top-center\",\n            autoClose:3000,\n            hideProgressBar:true,\n            pauseOnHover:true,\n            closeOnClick:true\n        })\n    }\n    const user = localStorage.getItem('userid')\n    const [User, setUser] = useState({})\n    const [interests, setInterests] = useState([])\n    const [interest, setInterest] = useState(\"\")\n    const [file, setFile] = useState()\n    const [profileImg, setProfileImg] = useState()\n  \n    //Show hide modal\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    //Profile image modal\n    const [profile, setProfileShow] = useState(false);\n    const profileClose = () => setProfileShow(false);\n    const profileShow = () => setProfileShow(true);\n\n    useEffect(() => {\n        async function getUserInfo() {\n            const UserInformation = await axios.get(`http://localhost:8080/users/${user}`)\n            setUser(UserInformation.data)\n            setInterests(UserInformation.data.interests)\n            setProfileImg(`http://localhost:8080/uploads/users/${user}/${UserInformation.data.profileImage}`)\n            console.log(UserInformation)\n        }\n        getUserInfo()\n    },[])\n\n    //Edit user information\n    const initialValues = {\n        firstname: User.firstname,\n        lastname: User.lastname,\n        username: User.username,\n        emailid: User.emailid,\n        dob: User.dob\n    }\n    const onSubmit = (values) => {\n        // axios.post(`http://localhost:8080/users/${user}/update`, values)\n        // .then(response=> console.log(response))\n        // .catch(err=> console.log(err))\n        // console.log(values)\n    }\n    const validationSchema = Yup.object({\n        firstname: Yup.string().required(\"First name is required...\"),\n        lastname: Yup.string().required(\"Last name is required...\"),\n        username: Yup.string().required(\"Username is required...\"),\n        emailid: Yup.string().required('Email id is required...'),\n        dob: Yup.date().required(\"DOB is required\")\n    })\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n        validationSchema\n    })\n    let tooltip = <Tooltip><strong>Edit Profile Information</strong></Tooltip>;\n    // console.log(formik.values)\n\n    const handleAddInterest =async () =>{\n        try{\n            if(interest === \"\" || interest === null){\n                window.alert(\"Include a language first...\")\n            }else{\n                const response = await axios.post(`http://localhost:8080/users/${user}/interests/add`, {interest})\n                setInterests([...interests, response.data.interest])\n                AddedLanguage(response.data.message)\n                setInterest('')\n            } \n        }catch(err){\n            console.log(err)\n        }\n    }\n\n    const handleImageUpload =async ()=>{\n        try{\n            const data = new FormData()\n            data.append(\"file\", file)\n            const imageUpload =await axios.post(`http://localhost:8080/users/${user}/image/upload`, data)\n            console.log(imageUpload.data)\n        }catch(err){\n            console.log(err)\n        }\n\n    }   \n    return (\n     \n        <div className=\"user-information-section\">\n            <div className=\"user-information-heading\">\n                \n                <h3>User Information  <OverlayTrigger placement=\"top\" overlay={tooltip}>\n                    <FontAwesomeIcon icon = {faEdit}  onClick={handleShow} className = \"icon\"/>\n                    </OverlayTrigger>\n                    </h3>\n            </div>\n            <div className=\"user-information-display\">\n                {/* <ul>\n                    <li><FontAwesomeIcon icon={faUser} className=\"icon\" />Name: <pre> {User.firstname} {User.lastname}</pre></li>\n                    <li><FontAwesomeIcon icon={faUsers} className=\"icon\" />Username:<pre> {User.username}</pre></li>\n                    <li><FontAwesomeIcon icon={faEnvelope} className=\"icon\" />Email:<pre> {User.emailid}</pre></li>\n                    <li><FontAwesomeIcon icon={faCalendar} className=\"icon\" />DOB:<pre> {moment(User.dob).format(\"MMMM DD YYYY\")}</pre></li>\n\n                </ul> */}\n\n                <Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"top\" src={profileImg && profileImg !== '' || profileImg === undefined || profileImg === null? profileImg : \"/images/Dp.svg\"} />\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item><FontAwesomeIcon icon={faUser} className=\"icon\" />Name: <pre> {User.firstname} {User.lastname}</pre></ListGroup.Item>\n                        <ListGroup.Item><FontAwesomeIcon icon={faUsers} className=\"icon\" />Username:<pre> {User.username}</pre></ListGroup.Item>\n                        <ListGroup.Item><FontAwesomeIcon icon={faEnvelope} className=\"icon\" />Email:<pre> {User.emailid}</pre></ListGroup.Item>\n                        <ListGroup.Item><FontAwesomeIcon icon={faCalendar} className=\"icon\" />DOB:<pre> {moment(User.dob).format(\"MMMM DD YYYY\")}</pre></ListGroup.Item>\n\n                    </ListGroup>\n                    <button className = \"btn btn-danger\" onClick = {profileShow}>Change Profile Picture?</button>\n                </Card>\n            </div>\n            <div style = {{backgroundColor:\"white\", borderRadius:\"10px\", maxWidth:\"68%\"}} className = \"mt-4\">\n\n            <h5 style ={{textAlign:\"center\"}}>Preferred Languages</h5>\n            <div className=\"interests\">\n                {interests.length > 0 ? <UserInterests interests = {interests}\n                    setInterests = {setInterest}\n                /> : <div> You do not have any preferred languages</div>}\n            </div>\n            <div className=\"addBtn mt-4\">\n            <div class=\"input-group mb-3\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Enter a language name e.g. python\" \n                value = {interest}\n                onChange = {e=> setInterest(e.target.value)}\n            />\n            <div class=\"input-group-append\">\n            <button className = \"btn btn-danger\" onClick = {(e)=>{\n                e.preventDefault()\n                handleAddInterest()\n            }}>Add</button>\n            </div>\n          </div>\n            </div>\n            </div>\n\n            {/*Change image modal*/}\n            <>\n                <Modal show={profile} onHide={profileClose}>\n                    <Modal.Header closeButton>\n                    <Modal.Title>Upload Profile Image</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <form encType = \"multipart/form-data\">\n                        <div class=\"input-group mb-3\">\n                        <input type=\"file\" class=\"form-control\" name = \"file\" accept = \".jpg\"\n                            onChange = {event=>{\n                                const file = event.target.files[0]\n                                console.log(event.target.files)\n                                setFile(file)\n                            }}\n                        />\n                        <div class=\"input-group-append\">\n                        <button className = \"btn btn-danger\" onClick = {(e)=>{\n                            e.preventDefault()\n                            handleImageUpload()\n                        }}>Upload</button>\n                        </div>\n                        </div>\n                    </form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={profileClose} style = {{backgroundColor:\"#1c2237\"}}>\n                        Close\n                    </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n\n\n\n            <Modal show={show} onHide={handleClose} className=\"modal-user-update\">\n                <Modal.Header closeButton>\n                    <Modal.Title >UPDATE USER INFORMATION</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form onSubmit={formik.handleSubmit}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"firstname\">First Name: </label>\n                            <input\n                                type=\"text\" name=\"firstname\"\n                                className=\"form-control\" id=\"firstname\"\n                                placeholder=\"Enter the firstname..\"\n                                value={formik.values.firstname}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"lastname\">Last Name: </label>\n                            <input type=\"text\" name=\"lastname\"\n                                className=\"form-control\" id=\"lastname\"\n                                placeholder=\"Enter the lastname..\"\n                                value={formik.values.lastname}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\"> Username: </label>\n                            <input type=\"text\" name=\"username\"\n                                className=\"form-control\" id=\"username\"\n                                placeholder=\"Enter the username..\"\n                                value={formik.values.username}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email ID: </label>\n                            <input type=\"email\" name=\"emailid\"\n                                className=\"form-control\" id=\"email\"\n                                value={`${formik.values.emailid}`}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dob\">Date of Birth: </label>\n                            <input type=\"date\" name=\"dob\"\n                                className=\"form-control\"\n                                id=\"dob\"\n                                value={formik.values.dob}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                            />\n                        </div>\n                        {/* <input type=\"text\" name=\"teext\" id=\"\" value=\"name\" /> */}\n              \n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button type=\"submit\" variant=\"danger\">\n                            save changes\n                        </Button>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Close\n                </Button>\n                </Modal.Footer>\n\n            </Modal>\n\n            {/* <div className=\"justify-content-center\">\n                <Button variant=\"success\" onClick={handleShow}>Edit Profile Information</Button>\n            </div> */}\n        </div>\n    )\n}\n\nexport default UserInformation\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\userSearch\\searchPanel.js",["526"],"import React, { useState } from 'react'\nimport { Modal, Button, Card } from 'react-bootstrap'\nimport UserSearch from '../user-search-component/userSearch'\nimport GroupSearchComponent from '../group-search/group-search-component'\nimport axios from 'axios'\nimport * as Yup from 'yup'\nimport { useFormik } from 'formik'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './searchPanel.css'\nfunction SearchPanel() {\n    const uid = localStorage.getItem('userid')\n    //search modal\n    const [searchShow, setSearchShow] = useState(false);\n    const handleSearchClose = () => setSearchShow(false);\n    const handleSearchShow = () => setSearchShow(true);\n\n    //group modal\n    const [groupShow, setGroupShow] = useState(false);\n    const handleGroupClose = () => setGroupShow(false);\n    const handleGroupShow = () => setGroupShow(true);\n\n    //Group form validation \n    const initialValues = {\n        title: '',\n        description: ''\n    }\n    const onSubmit = (values, onSubmitProps) => {\n        try {\n            const response = axios.post(`http://localhost:8080/groups/create/${uid}`, values)\n            response.then(res => console.log(res))\n                .catch(err => console.log())\n        } catch (err) {\n            console.log(err)\n        }\n        // axios.post(`http://localhost:8080/groups/create/${uid}`,values)\n        // .then(response=> console.log(response))\n        // .catch(err=> console.log(err))\n        // onSubmitProps.resetForm()\n    }\n    const validationSchema = Yup.object({\n        title: Yup.string().required(\"Title is required.\"),\n        description: Yup.string().required(\"Description is required.\")\n    })\n    const formik = useFormik({\n        initialValues, onSubmit, validationSchema\n    })\n\n    return (\n        <>\n            <div className=\"container-fluid \" style={{ color: \"white\" }}>\n                <Card style={{ width: '18rem' }}>\n                   \n                    <Card.Body>\n                    <Card.Title style={{ color: 'black' }}>User Search</Card.Title>\n                        <Card.Link className=\"cols\" onClick={handleSearchShow} href=\"#\">User Search</Card.Link>\n                        <Card.Link  className=\"cols\" onClick={handleGroupShow} href=\"#\">Search for groups?</Card.Link>\n                    </Card.Body>\n                </Card>\n\n\n\n                <Modal show={searchShow} onHide={handleSearchClose} backdrop=\"static\" keyboard={false} >\n                        <Modal.Body>\n                            <UserSearch />\n                        </Modal.Body>\n                        <Modal.Footer>\n                        <Button onClick={handleSearchClose}>Close</Button>\n                            </Modal.Footer>\n                    </Modal>\n\n\n                    <Modal show={groupShow} onHide={handleGroupClose} animation={true} keyboard={false} backdrop=\"static\">\n                    <Modal.Body>\n                    <GroupSearchComponent />\n                        </Modal.Body>\n                        <Modal.Footer>\n                        <Button onClick={handleGroupClose}>Close</Button>\n                    </Modal.Footer>\n                    </Modal>\n            </div>\n\n        </>\n    )\n}\n\nexport default SearchPanel\n\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\create-post\\create-post.js",["527"],"import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './create-post.css'\nimport {Card} from 'react-bootstrap'\nimport { useFormik } from 'formik'\nimport * as Yup from 'yup'\nimport axios from 'axios'\nfunction UserPost({setTotalPosts, posts}) {\n\n    const initialValues = {\n        title: '',\n        body: '',\n        author: localStorage.getItem('userid'),\n        postType: 'profile'\n    }\n    const onSubmit = async (values, onSubmitProps) => {\n        try{\n            const res =await axios.post('http://localhost:8080/posts/add', values)\n            console.log(res.data)\n            setTotalPosts([...posts, res.data.post])\n            onSubmitProps.resetForm()\n        }catch(err){\n            console.log(err)\n        }\n    }\n    const validationSchema = Yup.object({\n        title: Yup.string().required('This field is required..'),\n        body: Yup.string().required('This field is required..')\n    })\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit,\n        validationSchema\n    })\n\n    return (\n        <div>\n            <div className=\"container\">\n                <h3 >Create a new post..</h3>\n\n\n                <form onSubmit={formik.handleSubmit}>\n\n                    <Card>\n                        <Card.Body>\n                        <div className=\"row\">\n                        <div className=\"col post-heading\">\n                            <label htmlFor=\"postheading\">Post Title:</label>\n                            <input type=\"text\" name=\"title\" id=\"title\" style={{ width: \"100%\" }}\n                                placeholder=\"Enter the post title...\"\n                                onChange={formik.handleChange}\n                                onBlur={formik.onBlur}\n                                value={formik.values.title}\n                            />\n                            {formik.errors.title && formik.touched.title ? <div style={{ color: 'crimson' }}><p>{formik.errors.title}</p></div> : null}\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <div className=\"post-body\">\n                                <label htmlFor=\"body\">Post Description: </label>\n                                <textarea name=\"body\" id=\"body\" rows=\"6\"\n                                    placeholder=\"Enter the post description....\"\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.onBlur}\n                                    value={formik.values.body}\n                                />\n                                {formik.errors.body && formik.touched.body ? <div style={{ color: 'crimson' }}><p>{formik.errors.body}</p></div> : null}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"add-post-button btn-right\">\n                        <button type=\"submit\">Add Post!</button>\n                    </div>\n                        </Card.Body>\n                    </Card>\n      \n\n\n\n\n                </form>\n            </div>\n\n\n\n\n        </div>\n    )\n}\n\nexport default UserPost\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\messenger\\mainchat-area.js",["528","529"],"import React,{useState, useEffect} from 'react'\nimport Message from './message'\nimport axios from 'axios'\nimport io from 'socket.io-client'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './messenger.css'\n\nfunction MainChatArea({chatid}) {\n    // const socket = io('http://localhost:8080')\n    // socket.on('connection', ()=>{\n    //     console.log('I am connected to the backend')\n    // })\n   \n    const [message,setMessage] = useState([])\n    const [text,setText] = useState('')\n    \n    useEffect(()=>{\n        axios.get(`http://localhost:8080/chats/${chatid}`)\n        .then(response=> {\n            setMessage(response.data.messages)\n        })\n        .catch(err=> console.log(err))\n    },[])\n\n    const sendMessage = () =>{\n        const sender = localStorage.getItem('userid')\n        axios.post(`http://localhost:8080/chats/${chatid}/message/new`, {sender,text})\n        .then(response=>{\n            console.log(response)\n            setText('')\n        }).catch(err=>{\n            console.log(err)\n        })\n    }\n   \n    return (\n        <div className = \"main-chat-area\">\n        <div className=\"title\">\n            <h3>Messenger</h3>\n        </div>\n        <div className=\"chat-messages\">\n            <div className=\"container-fluid message-area \">\n             \n                {message.length > 0 ? (\n                    message.map(m=>(\n                        <Message message = {m}/>\n                    ))\n                ) : <div>No messages yet</div> }\n            </div>\n            </div>\n            <div className=\" container-fluid send-message\">\n            <div class=\"input-group mb-3\">\n            <input type=\"text\"\n             class=\"form-control  send-message-input\" \n             placeholder=\"Type your message .....\" \n             aria-label=\"Recipient's username\" \n             aria-describedby=\"basic-addon2\"\n             value = {text}\n\n             onChange = {e=> setText(e.target.value)}\n             />\n            <div class=\"input-group-append\">\n              <button className = \"btn btn-danger\" type = \"submit\" onClick = { (e)=> {\n                  e.preventDefault()\n                    sendMessage()\n            }}>Send </button>\n            </div>\n          </div>\n        </div>\n            \n        \n        </div>\n    )\n}\n\nexport default MainChatArea\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\messenger\\sidechat-panel.js",["530","531","532"],"import React,{useState,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport axios from 'axios'\nimport Conversation from '../conversations/conversation'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './messenger.css'\nfunction ChatSidePanel() {\n    const uid = localStorage.getItem('userid')\n    const [chats,setChats] = useState([])\n    //Users search\n    const [users,setUsers] = useState([])\n    const [filteredUsers,setFileteredUsers] = useState([])\n    const [searchText , setSearchText] = useState('')\n\n    useEffect(()=>{\n        \n        axios.get(`http://localhost:8080/chats/${uid}/chats`)\n        .then(response=>{\n            setChats(response.data)\n        }).catch(err=>{\n            console.log(err)\n        })\n    },[])\n    useEffect(() => {\n      const getUsers =async ()=>{\n        try{\n            const response =await axios.get(`http://localhost:8080/users/${uid}/getall`)\n            setUsers(response.data.following)\n        }catch(err){\n            console.log(err)\n        }\n      }\n      getUsers()\n    }, [])\n    useEffect(()=>{\n        if(users.length !== 0){\n            const result = users.filter(u=> u.username.includes(searchText) && searchText !== '')\n            setFileteredUsers(result)\n        }\n    },[searchText])\n    const createChat =async (userid)=>{\n        const recieverId = userid\n        const senderId = localStorage.getItem('userid')\n        await axios.post(`http://localhost:8080/chats/create`, {recieverId,senderId})\n        .then(res=>console.log(res))\n        .catch(err=> console.log(err))\n    }\n    return (\n        <div className = \"side-panel-main\">\n            <div className=\"title\">\n                <Link to = \"/messenger\"><h3>Chats</h3></Link>\n            </div>\n            <div className=\"chat-list mt-3\">\n                <ul>\n                    {chats?.length > 0 ? (\n                        chats.map(chat=>(\n                            <Conversation conversation = {chat}/>\n                        ))\n                    ) : <div>No chats yet</div>\n                }\n                </ul>\n            </div>\n            <div className=\"create-new-chat\">\n            <h4 style = {{color:\"#1c2237\"}}>Create New Chat</h4>\n            <div class=\"input-group mb-3\">\n            <input type=\"text\"\n            class=\"form-control\" \n            placeholder=\"Enter username...\" \n            aria-label=\"Recipient's username\" \n            aria-describedby=\"basic-addon2\"\n            value = {searchText}\n            onChange = {e=> setSearchText(e.target.value)}\n            />\n            \n            \n            \n          </div>\n          <div className=\"users\">\n                {filteredUsers.length > 0 ? filteredUsers.map(u=>(\n                    <div className = \"user-search-result\">\n                        <div>{`${u.firstname} ${u.lastname} (${u.username})`}</div>\n                        <button className = \"btn btn-danger\" onClick = {()=>{\n                            createChat(u._id)\n                        }}>Create Chat</button>\n                    </div>\n                    )): <div>No users found</div>}\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatSidePanel\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\whiteboard\\container\\Container.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\messenger\\message.js",["533"],"import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport './messenger.css'\nfunction Message({message}) {\n    const [user, setUser] = useState(null)\n    useEffect(() => {\n       const getUser = async ()=>{\n           const res = await axios.get(`http://localhost:8080/users/${message.sender}`)\n           setUser(res.data)\n       }\n       getUser()\n    },[])\n    return (\n        <div key = {message._id} className=\"message-container\">\n        <div className={message.sender === localStorage.getItem('userid') ? null : 'float-element'}>\n        <small style = {{fontSize:'18px', fontFamily:\"cursive\"} }>{message.sender === localStorage.getItem('userid') ? \"You\" : user?.firstname}: </small>\n            <div className = \"message-box\">\n                {message.text}\n            </div>\n        </div>\n        </div>\n        \n    )\n}\n\nexport default Message\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\user-search-component\\userSearch.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\whiteboard\\board\\Board.js",["534"],"import React from 'react';\nimport io from 'socket.io-client';\n\nimport './style.css';\n\nclass Board extends React.Component {\n\n    timeout;\n    socket = io.connect(\"http://localhost:8080\");\n\n    ctx;\n    isDrawing = false;\n\n    constructor(props) {\n        super(props);\n\n        this.socket.on(\"canvas-data\", function(data){\n\n            var root = this;\n            var interval = setInterval(function(){\n                if(root.isDrawing) return;\n                root.isDrawing = true;\n                clearInterval(interval);\n                var image = new Image();\n                var canvas = document.querySelector('#board');\n                var ctx = canvas.getContext('2d');\n                image.onload = function() {\n                    ctx.drawImage(image, 0, 0);\n\n                    root.isDrawing = false;\n                };\n                image.src = data;\n            }, 200)\n        })\n    }\n\n    componentDidMount() {\n        this.drawOnCanvas();\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.ctx.strokeStyle = newProps.color;\n        this.ctx.lineWidth = newProps.size;\n    }\n\n    drawOnCanvas() {\n        var canvas = document.querySelector('#board');\n        this.ctx = canvas.getContext('2d');\n        var ctx = this.ctx;\n\n        var sketch = document.querySelector('#sketch');\n        var sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n\n        var mouse = {x: 0, y: 0};\n        var last_mouse = {x: 0, y: 0};\n\n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n\n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n\n\n        /* Drawing on Paint App */\n        ctx.lineWidth = this.props.size;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = this.props.color;\n\n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n\n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n        var root = this;\n        var onPaint = function() {\n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n\n            if(root.timeout != undefined) clearTimeout(root.timeout);\n            root.timeout = setTimeout(function(){\n                var base64ImageData = canvas.toDataURL(\"image/png\");\n                root.socket.emit(\"canvas-data\", base64ImageData);\n            }, 1000)\n        };\n    }\n\n    render() {\n        return (\n            <div class=\"sketch\" id=\"sketch\" >\n                <canvas className=\"board\" id=\"board\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Board","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\user-search-component\\userBox.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\Youtube.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\Searchbar.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\VideoList.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\VideoDetail.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\youtube\\VideoItem.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\apis\\youtube.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\Profile-Information\\usercard.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\conversations\\conversation.js",["535"],"import axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\nimport React, {useState, useEffect} from 'react'\r\nimport './conversation.css'\r\nfunction Conversation({conversation}) {\r\n    const uid = localStorage.getItem('userid')\r\nconst [user,setUser] = useState(null)\r\nuseEffect(()=>{\r\n    const friendId = conversation.participants.find(m => m.toString() !== uid)\r\n    const getUser = async ()=>{\r\n        const res = await axios.get(`http://localhost:8080/users/${friendId}`)\r\n        setUser(res.data)\r\n    }\r\n    getUser()\r\n},[])\r\nconsole.log(user)\r\n    return (\r\n        <Link style= {{textDecoration:'none', color:\"black\"}} to = {`/messenger/${conversation._id}`}>\r\n            <div className=\"conversation\">\r\n                <img className = 'conversationImg' src=\"/images/danial.jpg\" alt=\"\" />\r\n                <span className=\"conversationName\">{user?.firstname} {user?.lastname}</span>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Conversation\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\follow-card\\followcard.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\Messenger.js",["536","537","538","539","540"],"import React, {useState,useEffect, useRef} from 'react'\r\nimport NavigationBar from '../navigation-bar/userNavbar'\r\nimport ChatOnline from './chatOnline/ChatOnline'\r\nimport Conversation from './conversations/Conversation'\r\nimport Message from './message/Message'\r\nimport axios from 'axios'\r\nimport {io} from 'socket.io-client'\r\nimport {toast } from 'react-toastify'\r\nimport './newMessenger.css'\r\n\r\nfunction NewMessenger() {\r\n    toast.configure()\r\n    const NewChat = (message) =>{\r\n        toast.success(message, {\r\n            position:\"top-center\",\r\n            autoClose:2000,\r\n            hideProgressBar:true,\r\n            pauseOnHover:true,\r\n            closeOnClick:true\r\n        })\r\n}\r\n\r\n    const userid = localStorage.getItem('userid')\r\n    const [user,setUser] = useState(null)\r\n    const [conversations,setConversations ] = useState([])\r\n    const [currentChat,setCurrentChat ] = useState(null)\r\n    const [messages,setMessages ] = useState([])\r\n    const [arrivalMessage,setArrivalMessage ] = useState(null)\r\n    const [newMessage,setNewMessage ] = useState(\"\")\r\n    const [onlineUsers,setOnlineUsers ] = useState([])\r\n    const socket = useRef()\r\n    const scrollRef = useRef()\r\n\r\n    const [users, setUsers] = useState([])\r\n    const [searchText, setSearchText] = useState(\"\")\r\n    const [filteredUsers, setFilteredUsers] = useState([])\r\n\r\n\r\n    //Filter user search results\r\n    useEffect(()=>{\r\n        if(users.length !== 0){\r\n            const result = users.filter(u=> (u.username.includes(searchText) || u.firstname.includes(searchText)) && searchText !== '' )\r\n            setFilteredUsers(result)\r\n\r\n            \r\n            \r\n        }\r\n    },[searchText])\r\n\r\n    //create new chat\r\n    const createChat = async (uid) =>{\r\n        try{\r\n            const response = await axios.post(`http://localhost:8080/chats/create`, {senderId:userid, recieverId: uid})\r\n            NewChat(response.data.message)\r\n            setConversations([...conversations, response.data.chat])\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        socket.current = io(\"ws://localhost:8080\")\r\n        socket.current.on('getMessage', data=>{\r\n            setArrivalMessage({\r\n                sender: data.senderId,\r\n                text:data.text,\r\n                createdAt: Date.now()\r\n            })\r\n        })\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n        arrivalMessage && currentChat?.participants.includes(arrivalMessage.sender) &&\r\n        setMessages(prev => [...prev, arrivalMessage])\r\n    }, [arrivalMessage, currentChat])\r\n\r\n    useEffect(() => {\r\n        socket.current.emit('addUser',userid)\r\n        socket.current.on('getUsers', users=>{\r\n            setOnlineUsers(users.map(u=> u.userId))\r\n        })\r\n    }, [])\r\n  \r\n    useEffect(() => {\r\n      const getConversations = async ()=>{\r\n          try{\r\n            const res = await axios.get(`http://localhost:8080/chats/${userid}/chats/`)\r\n            setConversations(res.data)\r\n          }catch(err){\r\n            console.log(err)\r\n          }\r\n      }\r\n      getConversations()\r\n    }, [user?._id])\r\n\r\n   useEffect(() => {\r\n    const getUser =async () =>{\r\n        try{\r\n            const res = await axios.get(`http://localhost:8080/users/${userid}`)\r\n            const all = [ ...res.data.followers, ...res.data.following]\r\n            const unique = Array.from(new Set(all.map(a=> a._id))).map(id => {\r\n                return all.find(a=> a._id === id)\r\n            })\r\n            setUsers(unique)\r\n            setUser(res.data)\r\n            // //filter the participants of conversations\r\n            // const participants = conversations.map(c => [...c.participants])\r\n            // const merged =await participants.flat(1)\r\n            // const final =await [... new Set(merged)] \r\n            // console.log(final)\r\n            // setUser(res.data)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    getUser()\r\n   }, [])\r\n\r\n\r\n   //get messages\r\n   useEffect(()=>{\r\n    const getMessages = async () =>{\r\n        try{          \r\n            const res = await axios.get(`http://localhost:8080/chats/${currentChat?._id}/`)\r\n            setMessages(res.data.messages)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    getMessages()\r\n   },[currentChat])\r\n  const handleSubmit = async(e) =>{\r\n    e.preventDefault()\r\n    const message = {\r\n        sender: user._id,\r\n        text: newMessage\r\n    }\r\n    const recieverId = currentChat.participants.find(m => m.toString !== userid)\r\n\r\n    socket.current.emit('sendMessage', {\r\n        senderId:userid,\r\n        recieverId,\r\n        text: newMessage\r\n    })\r\n    try{\r\n        const res = await axios.post(`http://localhost:8080/chats/${currentChat?._id}/message/new`, message)\r\n        setMessages([...messages, res.data.message])\r\n        setNewMessage('')\r\n    }catch(err){\r\n        console.log(err)\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    scrollRef.current?.scrollIntoView({behavior:\"smooth\"})\r\n  },[messages])\r\n    return (\r\n        <>\r\n        <NavigationBar/>\r\n        <div className = \"messenger\">\r\n            <div className=\"chatMenu\">\r\n                <div className=\"chatMenuWrapper\">\r\n                    <input type=\"text\" placeholder = \"Search for friends\" className=\"chatMenuInput\" \r\n                        value = {searchText}\r\n                        onChange = {e => setSearchText(e.target.value)}\r\n                    />\r\n                    <div className=\"users-container\">\r\n                        {\r\n                            filteredUsers.length > 0 ? filteredUsers.map(u => (\r\n                                <div className = \"conversation\" style = {{backgroundColor:\"#cad3de\", display :\"flex\", justifyContent:\"space-between\"}}>\r\n                                <div>\r\n                                <img\r\n                                  className=\"conversationImg\"\r\n                                  src= \"/images/Dp.svg\"\r\n                                />\r\n                                <span className=\"conversationName\">{u.firstname} {u.lastname}</span></div>\r\n                                <button className = \"btn btn-danger\" onClick = {()=> createChat(u._id)}>Create Chat?</button>\r\n                                </div>\r\n                            )) : searchText === '' ? <div className = \"no-search-text\">Enter search text</div>  : <div className = \"no-search-text\">No users found</div> \r\n                        }\r\n                    </div>\r\n                    {\r\n                        conversations.map(c=>(\r\n                            <div onClick = {() => setCurrentChat(c)}>\r\n                                <Conversation conversation = {c} current = {user}/>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n            <div className=\"chatBox\">\r\n                <div className=\"chatBoxWrapper\">\r\n                {\r\n                    currentChat ? \r\n                <>\r\n                    <div className=\"chatBoxTop\">\r\n                        {\r\n                            messages.map(m=>(\r\n                                <div ref = {scrollRef}>\r\n                                <Message message = {m} own = {m.sender.toString() === userid}/>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <div className=\"chatBoxBottom\">\r\n                        <textarea placeholder = \"Write Something....\" className = \"chatMessageInput\" onChange = {(e)=> setNewMessage(e.target.value)}\r\n                        value = {newMessage}></textarea>\r\n                        <button className = \"chatSubmitButton\" onClick = {(e)=> handleSubmit(e)}>Send</button>\r\n                    </div>\r\n                    </> : <span className = \"noConversationText\">Open a conversation to start a chat</span>\r\n                }\r\n                </div>\r\n            </div>\r\n            <div className=\"chatOnline\">\r\n                <div className=\"chatOnlineWrapper\">\r\n                <h3>Online Friends</h3>\r\n                    <ChatOnline onlineUsers = {onlineUsers} current = {userid} setCurrentChat= {setCurrentChat}/>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewMessenger\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\conversations\\Conversation.js",["541","542"],"import axios from 'axios'\r\nimport React, {useState,useEffect} from 'react'\r\nimport './conversation.css'\r\nfunction Conversation({conversation, current}) {\r\n  const [img,setImg] = useState('')\r\n  const [user,setUser] = useState(null)\r\n  useEffect(() => {\r\n    const friendid = conversation?.participants.find(m => m.toString() !== current?._id )\r\n    const getUser = async () =>{\r\n      try{\r\n        const response = await axios.get(`http://localhost:8080/users/${friendid}`)\r\n        setUser(response.data)\r\n        if(response.data.profileImage !== ''){\r\n          setImg(`http://localhost:8080/uploads/users/${user._id}/${response.data.profileImage}`)\r\n        }\r\n        \r\n      }catch(err){\r\n        console.log(err)\r\n      }\r\n    }\r\n    getUser()\r\n  }, [current, conversation])\r\n    return (\r\n        <div className = \"conversation\">\r\n        <img\r\n          className=\"conversationImg\"\r\n          src= {img === 'http://localhost:8080//images/Dp.svg' ? \"/images/Dp.svg\" : img}\r\n        />\r\n        <span className=\"conversationName\">{user?.firstname} {user?.lastname}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Conversation\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\message\\Message.js",["543","544"],"import React, {useState,useEffect} from 'react'\r\nimport moment from 'moment'\r\nimport './message.css'\r\nimport axios from 'axios'\r\n\r\nfunction Message({message,own}) {\r\n  const [img,setImg] = useState('')\r\n  useEffect(async()=>{\r\n      try{\r\n        const response = await axios.get(`http://localhost:8080/users/${message.sender}/profile/image`)\r\n        if(response.data !== '' || response.data !== null){\r\n          setImg(`http://localhost:8080/uploads/users/${message.sender}/${response.data}`)\r\n          console.log(response.data)\r\n        }\r\n      }catch(err){\r\n        console.log(err)\r\n      }\r\n  },[])\r\n  console.log(img)\r\n    return (\r\n        <div className={own ? \"message own\" : \"message\"}>\r\n      <div className=\"messageTop\">\r\n        <img\r\n          className=\"messageImg\"\r\n          src={img === 'http://localhost:8080//images/Dp.svg' ? '/images/Dp.svg' : img}\r\n          alt=\"\"\r\n        />\r\n        <p className=\"messageText\">{message.text}</p>\r\n      </div>\r\n      <div className=\"messageBottom\">{moment(message.createdAt).fromNow()}</div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\NewMessenger\\chatOnline\\ChatOnline.js",["545","546","547","548","549","550","551","552","553","554","555","556","557"],"import axios from 'axios'\r\nimport {Modal, Button } from 'react-bootstrap'\r\nimport React,{useState,useEffect,useRef} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\r\nimport io from 'socket.io-client'\r\nimport Peer from 'simple-peer'\r\nimport './ChatOnline.css'\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:8080\")\r\n\r\nfunction ChatOnline({current, onlineUsers , setCurrentChat}) {\r\n    const[friends, setFriends] = useState([])\r\n    const [onlineFriends , setOnlineFriends] = useState([])\r\n\r\n\r\n    \r\n\r\n    //call functions\r\n    const [me, setMe] =useState('')\r\n    const [stream, setStream] = useState()\r\n    const [receivingCall, setReceivingCall] = useState(false)\r\n    const [caller,setCaller] = useState(\"\")\r\n    const [callerSignal, setCallerSignal] = useState()\r\n    const [callAccepted, setCallAccepted] = useState(false)\r\n    const [idToCall, setIdToCall] = useState('')\r\n    const [callEnded, setCallEnded] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const myVideo = useRef()\r\n    const userVideo = useRef()\r\n    const connectionRef = useRef()\r\n\r\n    useEffect(()=>{\r\n      navigator.mediaDevices.getUserMedia({video:true, audio:true})\r\n      .then(stream=> {\r\n        setStream(stream)\r\n        myVideo.current.srcObject = stream\r\n      })\r\n      \r\n      socket.on('me',(id)=>{\r\n        setMe(id)\r\n      })\r\n\r\n      socket.on('callUser', (data)=>{\r\n        setReceivingCall(true)\r\n        setCaller(data.from)\r\n        setName(data.name)\r\n        setCallerSignal(data.signal)\r\n      })\r\n\r\n\r\n    },[])\r\n\r\n\r\n    const callUser = (id)=>{\r\n        const peer = new Peer({\r\n          initiator:true,\r\n          trickle:false,\r\n          stream:stream\r\n        })\r\n\r\n        peer.on(\"signal\", (data)=>{\r\n          socket.emit(\"callUser\", {\r\n            userToCall:id,\r\n            signalData:data,\r\n            from:me,\r\n            name:name\r\n          })\r\n        })\r\n\r\n        peer.on(\"stream\", (stream)=>{\r\n          userVideo.current.srcObject = stream\r\n        })\r\n\r\n        socket.on(\"callAccepted\", (signal)=>{\r\n          setCallAccepted(true)\r\n          peer.signal(signal)\r\n        })\r\n\r\n        connectionRef.current = peer\r\n\r\n    }\r\n\r\n    const answerCall = ()=>{\r\n      setCallAccepted(true)\r\n      const peer = new Peer({\r\n        initiator:false,\r\n        trickle:false,\r\n        stream:stream\r\n      })\r\n\r\n      peer.on(\"signal\", (data)=>{\r\n        socket.emit(\"answerCall\", {\r\n          signal:data,\r\n          to:caller\r\n        })\r\n      })\r\n\r\n      peer.on('stream', (stream)=>{\r\n        userVideo.current.srcObject = stream\r\n      })\r\n\r\n      peer.signal(callerSignal)\r\n      connectionRef.current = peer\r\n\r\n    }\r\n\r\n    const leaveCall = ()=>{\r\n      setCallEnded(true)\r\n      connectionRef.current.destroy()\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const getFriends = async ()=>{\r\n            try{\r\n                const res = await axios.get(`http://localhost:8080/users/${current}/getall`)\r\n                const followers = res.data.followers\r\n                const ids = followers.map(f => f._id)\r\n                const friends_merged = [...followers,... res.data.following.filter(f=> !ids.includes(f._id))]\r\n                setFriends(friends_merged)\r\n            }catch(err){\r\n                console.log(err)\r\n            }\r\n        }\r\n        getFriends()\r\n    },[current])\r\n    \r\n    useEffect(()=>{\r\n      setOnlineFriends(friends.filter(f=> onlineUsers.includes(f._id.toString())))\r\n    },[friends,onlineUsers])\r\n    \r\n    const handleClick = async (user) =>{\r\n      try{\r\n        const res = await axios.get(`http://localhost:8080/chats/${current}/chat/${user._id}`)\r\n        setCurrentChat(res.data)\r\n      }catch(err){\r\n        console.log(err)\r\n      }\r\n    }\r\n    return (\r\n        <div className = \"chatIconNameWrapper\">\r\n        <div className=\"chatOnline\">\r\n        {onlineFriends.map(\r\n          user=>(\r\n            <div className = \"onlineWrapper\">\r\n            <div className=\"chatOnlineFriend\" onClick = {()=>{handleClick(user)}}>\r\n            <div className=\"chatOnlineImgContainer\">\r\n              <img\r\n                className=\"chatOnlineImg\"\r\n                src=\"/images/Dp.svg\"\r\n                alt=\"\"\r\n              />\r\n              <div className=\"chatOnlineBadge\"></div>\r\n            </div>\r\n            <span className=\"chatOnlineName\">{user.firstname} {user.lastname}</span>\r\n            \r\n          </div>\r\n          <button className = \"btn btn-danger\">Call</button>\r\n          </div>\r\n          )\r\n        )}\r\n        </div>\r\n       \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ChatOnline\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\group-search\\group-search-component.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\group-search\\groupBox.js",[],["558","559"],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\recommendations\\recommendedUsers.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\interests\\UserInterests.js",["560"],"import axios from 'axios'\r\nimport React from 'react'\r\nimport {toast} from 'react-toastify'\r\nimport './UserInterests.css'\r\nfunction UserInterests({interests, setInterests}) {\r\n    toast.configure()\r\n    const deleteLanguage = (message)=>{\r\n        toast.warning(message, {\r\n            position:\"top-center\",\r\n            autoClose:3000,\r\n            hideProgressBar:true,\r\n            pauseOnHover:true,\r\n            closeOnClick:true\r\n        })\r\n    }\r\n\r\n\r\n    const filtered = [... new Set(interests)]\r\n\r\n    const handleRemove = async(interest) =>{\r\n        const response = window.confirm(\"Remove language?\")\r\n        if(response){\r\n            const remove =await axios.post(`http://localhost:8080/users/${localStorage.getItem('userid')}/interests/remove`,{interest})\r\n            setInterests([...remove.data.interests])\r\n            deleteLanguage(remove.data.message)\r\n            \r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                filtered.map(i=>(\r\n                    <div className = \"interest\" onClick = {()=> handleRemove(i)}><span className = \"tag\" style ={{\r\n                        backgroundColor:\"#1c2237\"\r\n                    }}>{i?.toUpperCase()}</span></div> \r\n                ) )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserInterests\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\recommendations\\RecommendedUserCard.js",[],"D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\memberCard.js",["561"],"import React, {useState} from 'react'\r\nimport {Button, Modal} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport {toast} from 'react-toastify'\r\nimport './membercard.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nfunction MemberCard({user, groupid}) {\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    toast.configure()\r\n    const removeuser = (message)=>{\r\n        toast.warning(message, {\r\n            position:\"top-center\",\r\n            autoClose:3000,\r\n            hideProgressBar:true,\r\n            pauseOnHover:true,\r\n            closeOnClick:true\r\n        })\r\n    }\r\n\r\n\r\n    const removeUser = async (id)=>{\r\n      try{\r\n          const response = await axios.post(`http://localhost:8080/groups/${groupid}/members/remove`, {userid:id})\r\n          removeuser(response.data)\r\n      }catch(err){\r\n          console.log(err)\r\n      }\r\n  }\r\n    return (\r\n      <>\r\n        <div className = \"card-container mb-2\" onClick = {handleShow}>\r\n            <img src=\"/images/Dp.svg\" alt=\"\" height = \"40px\" style = {{marginRight:\"10px\"}}/>\r\n            {user.firstname} {user.lastname}\r\n        </div>\r\n\r\n \r\n        <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{user.firstname.toUpperCase()} {user.lastname.toUpperCase()}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <div className=\"user-modal-container\">\r\n        <div className=\"user-modal-image-container mb-3\">\r\n            <img src = \"/images/Dp.svg\" alt=\"\" height = \"150\"/>\r\n          </div>\r\n            <p>Username : {user.username}</p>\r\n            <p>DOB : {moment(user.dob).format(\"Do MMMM, YYYY\")}</p>\r\n            <div className=\"remove-btn mt-3\">\r\n                <button className = \"btn btn-danger\" onClick = {()=> removeUser(user._id)}>Remove</button>\r\n            </div>   \r\n        </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      </>\r\n     \r\n    )\r\n}\r\n\r\nexport default MemberCard\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\groupComponent\\AddUserCard.js",["562"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './membercard.css'\r\nimport axios from 'axios'\r\nimport {toast} from 'react-toastify'\r\nfunction AddUserCard({user,groupid}) {\r\n    toast.configure()\r\n    const add = (message)=>{\r\n        toast.success(message, {\r\n            position:\"top-center\",\r\n            autoClose:3000,\r\n            hideProgressBar:true,\r\n            pauseOnHover:true,\r\n            closeOnClick:true\r\n        })\r\n    }\r\n\r\n    const addUser = async (id)=>{\r\n        try{\r\n            const response = await axios.post(`http://localhost:8080/groups/${groupid}/members/add`, {userid:id})\r\n            if(response.data === '')\r\n            console.log(response.data)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    return (\r\n        <div className = \"mb-2\" style = {{display:\"flex\", flexDirection:\"row\", justifyContent:\"space-between\"}}>\r\n        <div className = \"card-container\" style = {{width:\"15vw\"}}>\r\n            <img src=\"/images/Dp.svg\" alt=\"\" height = \"40px\" style = {{marginRight:\"10px\"}}/>\r\n            {user.firstname} {user.lastname}\r\n           \r\n        </div>\r\n        <button className = 'btn btn-danger' style = {{height:\"70px\"}} onClick = {()=> addUser(user._id)}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUserCard\r\n","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\video-chat-room\\JitsiComponent.js",["563","564","565"],"import React, { Component } from 'react';\r\nimport NavigationBar from '../navigation-bar/userNavbar';\r\nimport Footer from '../footer-section/footer';\r\n\r\nclass JitsiComponent extends Component {\r\n    \r\n    domain = 'meet.jit.si';\r\n    api = {};\r\n\r\n    constructor(props) {\r\n        console.log(props)\r\n        super(props);\r\n        this.state = {\r\n            room: props.match?.params.id,\r\n            user: {\r\n                name: localStorage.getItem('username')\r\n            },\r\n            isAudioMuted: false,\r\n            isVideoMuted: false\r\n        }\r\n    }\r\n\r\n    startMeet = () => {\r\n        const options = {\r\n            roomName: this.state.room,\r\n            width: '100%',\r\n            height: 800,\r\n            configOverwrite: { prejoinPageEnabled: false },\r\n            interfaceConfigOverwrite: {\r\n                // overwrite interface properties\r\n            },\r\n            parentNode: document.querySelector('#jitsi-iframe'),\r\n            userInfo: {\r\n                displayName: this.state.user.name\r\n            }\r\n        }\r\n        this.api = new window.JitsiMeetExternalAPI(this.domain, options);\r\n\r\n        this.api.addEventListeners({\r\n            readyToClose: this.handleClose,\r\n            participantLeft: this.handleParticipantLeft,\r\n            participantJoined: this.handleParticipantJoined,\r\n            videoConferenceJoined: this.handleVideoConferenceJoined,\r\n            videoConferenceLeft: this.handleVideoConferenceLeft,\r\n            audioMuteStatusChanged: this.handleMuteStatus,\r\n            videoMuteStatusChanged: this.handleVideoStatus\r\n        });\r\n    }\r\n\r\n    handleClose = () => {\r\n        console.log(\"handleClose\");\r\n    }\r\n\r\n    handleParticipantLeft = async (participant) => {\r\n        console.log(\"handleParticipantLeft\", participant); // { id: \"2baa184e\" }\r\n        const data = await this.getParticipants();\r\n    }\r\n\r\n    handleParticipantJoined = async (participant) => {\r\n        console.log(\"handleParticipantJoined\", participant); // { id: \"2baa184e\", displayName: \"Shanu Verma\", formattedDisplayName: \"Shanu Verma\" }\r\n        const data = await this.getParticipants();\r\n    }\r\n\r\n    handleVideoConferenceJoined = async (participant) => {\r\n        console.log(\"handleVideoConferenceJoined\", participant); // { roomName: \"bwb-bfqi-vmh\", id: \"8c35a951\", displayName: \"Akash Verma\", formattedDisplayName: \"Akash Verma (me)\"}\r\n        const data = await this.getParticipants();\r\n    }\r\n\r\n    handleVideoConferenceLeft = () => {\r\n        console.log(\"handleVideoConferenceLeft\");\r\n        return this.props.history?.push({});\r\n    }\r\n\r\n    handleMuteStatus = (audio) => {\r\n        console.log(\"handleMuteStatus\", audio); // { muted: true }\r\n    }\r\n\r\n    handleVideoStatus = (video) => {\r\n        console.log(\"handleVideoStatus\", video); // { muted: true }\r\n    }\r\n\r\n    getParticipants() {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                resolve(this.api.getParticipantsInfo()); // get all participants\r\n            }, 500)\r\n        });\r\n    }\r\n\r\n    // custom events\r\n    executeCommand(command) {\r\n        this.api.executeCommand(command);\r\n        if(command === 'hangup') {\r\n            return this.props.history.push('/');\r\n        }\r\n\r\n        if(command === 'toggleAudio') {\r\n            this.setState({ isAudioMuted: !this.state.isAudioMuted });\r\n        }\r\n\r\n        if(command === 'toggleVideo') {\r\n            this.setState({ isVideoMuted: !this.state.isVideoMuted });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (window.JitsiMeetExternalAPI) {\r\n            this.startMeet();\r\n        } else {\r\n            alert('JitsiMeetExternalAPI not loaded');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isAudioMuted, isVideoMuted } = this.state;\r\n        return (\r\n            <>\r\n            <NavigationBar/>\r\n            <div id=\"jitsi-iframe\"></div>\r\n            <div class=\"item-center\">\r\n            </div>\r\n            <div class=\"item-center\">\r\n                <span>&nbsp;&nbsp;</span>\r\n                <i onClick={ () => this.executeCommand('toggleAudio') } className={`fas fa-2x grey-color ${isAudioMuted ? 'fa-microphone-slash' : 'fa-microphone'}`} aria-hidden=\"true\" title=\"Mute / Unmute\"></i>\r\n                <i onClick={ () => this.executeCommand('hangup') } className=\"fas fa-phone-slash fa-2x red-color\" aria-hidden=\"true\" title=\"Leave\"></i>\r\n                <i onClick={ () => this.executeCommand('toggleVideo') } className={`fas fa-2x grey-color ${isVideoMuted ? 'fa-video-slash' : 'fa-video'}`} aria-hidden=\"true\" title=\"Start / Stop camera\"></i>\r\n                <i onClick={ () => this.executeCommand('toggleShareScreen') } className=\"fas fa-film fa-2x grey-color\" aria-hidden=\"true\" title=\"Share your screen\"></i>\r\n            </div>\r\n           <Footer/>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JitsiComponent;","D:\\FYP-Implementation\\40% Implementation\\Edunetwork\\EduNetwork-V2-main\\frontend\\src\\components\\group-channels\\groupChannels.js",[],{"ruleId":"566","replacedBy":"567"},{"ruleId":"568","replacedBy":"569"},{"ruleId":"570","severity":1,"message":"571","line":52,"column":38,"nodeType":"572","endLine":52,"endColumn":41},{"ruleId":"570","severity":1,"message":"573","line":7,"column":61,"nodeType":"572","endLine":7,"endColumn":73},{"ruleId":"574","severity":1,"message":"575","line":168,"column":25,"nodeType":"572","endLine":168,"endColumn":76},{"ruleId":"576","severity":1,"message":"577","line":1,"column":37,"nodeType":"578","messageId":"579","endLine":1,"endColumn":43},{"ruleId":"576","severity":1,"message":"580","line":1,"column":25,"nodeType":"578","messageId":"579","endLine":1,"endColumn":34},{"ruleId":"576","severity":1,"message":"577","line":1,"column":35,"nodeType":"578","messageId":"579","endLine":1,"endColumn":41},{"ruleId":"576","severity":1,"message":"581","line":2,"column":9,"nodeType":"578","messageId":"579","endLine":2,"endColumn":15},{"ruleId":"576","severity":1,"message":"582","line":1,"column":8,"nodeType":"578","messageId":"579","endLine":1,"endColumn":17},{"ruleId":"566","replacedBy":"583"},{"ruleId":"568","replacedBy":"584"},{"ruleId":"576","severity":1,"message":"577","line":1,"column":37,"nodeType":"578","messageId":"579","endLine":1,"endColumn":43},{"ruleId":"576","severity":1,"message":"585","line":17,"column":22,"nodeType":"578","messageId":"579","endLine":17,"endColumn":33},{"ruleId":"574","severity":1,"message":"575","line":169,"column":25,"nodeType":"572","endLine":169,"endColumn":76},{"ruleId":"576","severity":1,"message":"586","line":16,"column":11,"nodeType":"578","messageId":"579","endLine":16,"endColumn":15},{"ruleId":"576","severity":1,"message":"587","line":16,"column":16,"nodeType":"578","messageId":"579","endLine":16,"endColumn":23},{"ruleId":"570","severity":1,"message":"571","line":52,"column":38,"nodeType":"572","endLine":52,"endColumn":41},{"ruleId":"570","severity":1,"message":"573","line":7,"column":61,"nodeType":"572","endLine":7,"endColumn":73},{"ruleId":"576","severity":1,"message":"588","line":4,"column":39,"nodeType":"578","messageId":"579","endLine":4,"endColumn":46},{"ruleId":"576","severity":1,"message":"589","line":6,"column":8,"nodeType":"578","messageId":"579","endLine":6,"endColumn":15},{"ruleId":"576","severity":1,"message":"590","line":16,"column":19,"nodeType":"578","messageId":"579","endLine":16,"endColumn":27},{"ruleId":"576","severity":1,"message":"577","line":3,"column":37,"nodeType":"578","messageId":"579","endLine":3,"endColumn":43},{"ruleId":"591","severity":1,"message":"592","line":19,"column":8,"nodeType":"593","endLine":19,"endColumn":10,"suggestions":"594"},{"ruleId":"576","severity":1,"message":"580","line":1,"column":25,"nodeType":"578","messageId":"579","endLine":1,"endColumn":34},{"ruleId":"576","severity":1,"message":"577","line":1,"column":35,"nodeType":"578","messageId":"579","endLine":1,"endColumn":41},{"ruleId":"576","severity":1,"message":"581","line":2,"column":9,"nodeType":"578","messageId":"579","endLine":2,"endColumn":15},{"ruleId":"576","severity":1,"message":"582","line":1,"column":8,"nodeType":"578","messageId":"579","endLine":1,"endColumn":17},{"ruleId":"576","severity":1,"message":"595","line":2,"column":8,"nodeType":"578","messageId":"579","endLine":2,"endColumn":13},{"ruleId":"576","severity":1,"message":"596","line":3,"column":16,"nodeType":"578","messageId":"579","endLine":3,"endColumn":24},{"ruleId":"576","severity":1,"message":"597","line":4,"column":8,"nodeType":"578","messageId":"579","endLine":4,"endColumn":14},{"ruleId":"566","replacedBy":"598"},{"ruleId":"568","replacedBy":"599"},{"ruleId":"576","severity":1,"message":"600","line":4,"column":24,"nodeType":"578","messageId":"579","endLine":4,"endColumn":32},{"ruleId":"576","severity":1,"message":"601","line":20,"column":11,"nodeType":"578","messageId":"579","endLine":20,"endColumn":19},{"ruleId":"576","severity":1,"message":"586","line":24,"column":12,"nodeType":"578","messageId":"579","endLine":24,"endColumn":16},{"ruleId":"591","severity":1,"message":"602","line":25,"column":15,"nodeType":"603","endLine":32,"endColumn":6},{"ruleId":"591","severity":1,"message":"604","line":32,"column":7,"nodeType":"593","endLine":32,"endColumn":9,"suggestions":"605"},{"ruleId":"591","severity":1,"message":"604","line":25,"column":8,"nodeType":"593","endLine":25,"endColumn":10,"suggestions":"606"},{"ruleId":"576","severity":1,"message":"586","line":10,"column":12,"nodeType":"578","messageId":"579","endLine":10,"endColumn":16},{"ruleId":"591","severity":1,"message":"602","line":11,"column":15,"nodeType":"603","endLine":21,"endColumn":6},{"ruleId":"591","severity":1,"message":"604","line":21,"column":7,"nodeType":"593","endLine":21,"endColumn":9,"suggestions":"607"},{"ruleId":"566","replacedBy":"608"},{"ruleId":"568","replacedBy":"609"},{"ruleId":"576","severity":1,"message":"610","line":28,"column":12,"nodeType":"578","messageId":"579","endLine":28,"endColumn":24},{"ruleId":"576","severity":1,"message":"611","line":14,"column":9,"nodeType":"578","messageId":"579","endLine":14,"endColumn":13},{"ruleId":"576","severity":1,"message":"586","line":22,"column":12,"nodeType":"578","messageId":"579","endLine":22,"endColumn":16},{"ruleId":"591","severity":1,"message":"612","line":52,"column":7,"nodeType":"593","endLine":52,"endColumn":9,"suggestions":"613"},{"ruleId":"591","severity":1,"message":"614","line":76,"column":7,"nodeType":"593","endLine":76,"endColumn":9,"suggestions":"615"},{"ruleId":"591","severity":1,"message":"602","line":78,"column":15,"nodeType":"603","endLine":86,"endColumn":7},{"ruleId":"591","severity":1,"message":"616","line":86,"column":8,"nodeType":"593","endLine":86,"endColumn":10,"suggestions":"617"},{"ruleId":"591","severity":1,"message":"618","line":99,"column":7,"nodeType":"593","endLine":99,"endColumn":19,"suggestions":"619"},{"ruleId":"576","severity":1,"message":"620","line":39,"column":12,"nodeType":"578","messageId":"579","endLine":39,"endColumn":20},{"ruleId":"576","severity":1,"message":"585","line":23,"column":22,"nodeType":"578","messageId":"579","endLine":23,"endColumn":33},{"ruleId":"591","severity":1,"message":"602","line":21,"column":15,"nodeType":"603","endLine":29,"endColumn":6},{"ruleId":"576","severity":1,"message":"580","line":1,"column":27,"nodeType":"578","messageId":"579","endLine":1,"endColumn":36},{"ruleId":"576","severity":1,"message":"621","line":14,"column":9,"nodeType":"578","messageId":"579","endLine":14,"endColumn":19},{"ruleId":"576","severity":1,"message":"622","line":26,"column":9,"nodeType":"578","messageId":"579","endLine":26,"endColumn":15},{"ruleId":"576","severity":1,"message":"623","line":39,"column":9,"nodeType":"578","messageId":"579","endLine":39,"endColumn":20},{"ruleId":"576","severity":1,"message":"624","line":82,"column":10,"nodeType":"578","messageId":"579","endLine":82,"endColumn":16},{"ruleId":"576","severity":1,"message":"625","line":83,"column":10,"nodeType":"578","messageId":"579","endLine":83,"endColumn":27},{"ruleId":"626","severity":1,"message":"627","line":11,"column":13,"nodeType":"572","endLine":11,"endColumn":90},{"ruleId":"576","severity":1,"message":"628","line":2,"column":8,"nodeType":"578","messageId":"579","endLine":2,"endColumn":15},{"ruleId":"576","severity":1,"message":"629","line":6,"column":11,"nodeType":"578","messageId":"579","endLine":6,"endColumn":19},{"ruleId":"626","severity":1,"message":"627","line":11,"column":78,"nodeType":"572","endLine":14,"endColumn":25},{"ruleId":"576","severity":1,"message":"581","line":2,"column":9,"nodeType":"578","messageId":"579","endLine":2,"endColumn":15},{"ruleId":"630","severity":1,"message":"631","line":121,"column":1,"nodeType":"632","messageId":"633","endLine":142,"endColumn":9},{"ruleId":"576","severity":1,"message":"634","line":2,"column":16,"nodeType":"578","messageId":"579","endLine":2,"endColumn":22},{"ruleId":"576","severity":1,"message":"635","line":16,"column":12,"nodeType":"578","messageId":"579","endLine":16,"endColumn":17},{"ruleId":"576","severity":1,"message":"636","line":20,"column":12,"nodeType":"578","messageId":"579","endLine":20,"endColumn":16},{"ruleId":"576","severity":1,"message":"637","line":21,"column":11,"nodeType":"578","messageId":"579","endLine":21,"endColumn":22},{"ruleId":"576","severity":1,"message":"638","line":22,"column":11,"nodeType":"578","messageId":"579","endLine":22,"endColumn":21},{"ruleId":"591","severity":1,"message":"639","line":40,"column":7,"nodeType":"593","endLine":40,"endColumn":9,"suggestions":"640"},{"ruleId":"591","severity":1,"message":"592","line":54,"column":7,"nodeType":"593","endLine":54,"endColumn":9,"suggestions":"641"},{"ruleId":"642","severity":1,"message":"643","line":131,"column":57,"nodeType":"644","messageId":"645","endLine":131,"endColumn":59},{"ruleId":"642","severity":1,"message":"643","line":131,"column":78,"nodeType":"644","messageId":"645","endLine":131,"endColumn":80},{"ruleId":"576","severity":1,"message":"646","line":44,"column":11,"nodeType":"578","messageId":"579","endLine":44,"endColumn":17},{"ruleId":"576","severity":1,"message":"596","line":1,"column":17,"nodeType":"578","messageId":"579","endLine":1,"endColumn":25},{"ruleId":"576","severity":1,"message":"647","line":4,"column":8,"nodeType":"578","messageId":"579","endLine":4,"endColumn":10},{"ruleId":"591","severity":1,"message":"616","line":23,"column":7,"nodeType":"593","endLine":23,"endColumn":9,"suggestions":"648"},{"ruleId":"591","severity":1,"message":"604","line":23,"column":7,"nodeType":"593","endLine":23,"endColumn":9,"suggestions":"649"},{"ruleId":"591","severity":1,"message":"604","line":34,"column":8,"nodeType":"593","endLine":34,"endColumn":10,"suggestions":"650"},{"ruleId":"591","severity":1,"message":"618","line":40,"column":7,"nodeType":"593","endLine":40,"endColumn":19,"suggestions":"651"},{"ruleId":"591","severity":1,"message":"652","line":12,"column":7,"nodeType":"593","endLine":12,"endColumn":9,"suggestions":"653"},{"ruleId":"654","severity":1,"message":"655","line":91,"column":29,"nodeType":"656","messageId":"657","endLine":91,"endColumn":31},{"ruleId":"591","severity":1,"message":"658","line":15,"column":3,"nodeType":"593","endLine":15,"endColumn":5,"suggestions":"659"},{"ruleId":"591","severity":1,"message":"618","line":48,"column":7,"nodeType":"593","endLine":48,"endColumn":19,"suggestions":"660"},{"ruleId":"591","severity":1,"message":"639","line":82,"column":8,"nodeType":"593","endLine":82,"endColumn":10,"suggestions":"661"},{"ruleId":"591","severity":1,"message":"639","line":94,"column":8,"nodeType":"593","endLine":94,"endColumn":19,"suggestions":"662"},{"ruleId":"591","severity":1,"message":"639","line":117,"column":7,"nodeType":"593","endLine":117,"endColumn":9,"suggestions":"663"},{"ruleId":"664","severity":1,"message":"665","line":172,"column":33,"nodeType":"572","endLine":175,"endColumn":35},{"ruleId":"591","severity":1,"message":"666","line":22,"column":6,"nodeType":"593","endLine":22,"endColumn":29,"suggestions":"667"},{"ruleId":"664","severity":1,"message":"665","line":25,"column":9,"nodeType":"572","endLine":28,"endColumn":11},{"ruleId":"591","severity":1,"message":"602","line":8,"column":13,"nodeType":"603","endLine":18,"endColumn":4},{"ruleId":"591","severity":1,"message":"668","line":18,"column":5,"nodeType":"593","endLine":18,"endColumn":7,"suggestions":"669"},{"ruleId":"576","severity":1,"message":"670","line":2,"column":9,"nodeType":"578","messageId":"579","endLine":2,"endColumn":14},{"ruleId":"576","severity":1,"message":"634","line":2,"column":16,"nodeType":"578","messageId":"579","endLine":2,"endColumn":22},{"ruleId":"576","severity":1,"message":"671","line":4,"column":10,"nodeType":"578","messageId":"579","endLine":4,"endColumn":25},{"ruleId":"576","severity":1,"message":"672","line":5,"column":10,"nodeType":"578","messageId":"579","endLine":5,"endColumn":17},{"ruleId":"576","severity":1,"message":"673","line":23,"column":12,"nodeType":"578","messageId":"579","endLine":23,"endColumn":25},{"ruleId":"576","severity":1,"message":"674","line":26,"column":12,"nodeType":"578","messageId":"579","endLine":26,"endColumn":24},{"ruleId":"576","severity":1,"message":"675","line":27,"column":12,"nodeType":"578","messageId":"579","endLine":27,"endColumn":20},{"ruleId":"576","severity":1,"message":"676","line":27,"column":22,"nodeType":"578","messageId":"579","endLine":27,"endColumn":33},{"ruleId":"576","severity":1,"message":"677","line":28,"column":12,"nodeType":"578","messageId":"579","endLine":28,"endColumn":21},{"ruleId":"576","severity":1,"message":"678","line":57,"column":11,"nodeType":"578","messageId":"579","endLine":57,"endColumn":19},{"ruleId":"576","severity":1,"message":"679","line":86,"column":11,"nodeType":"578","messageId":"579","endLine":86,"endColumn":21},{"ruleId":"576","severity":1,"message":"680","line":110,"column":11,"nodeType":"578","messageId":"579","endLine":110,"endColumn":20},{"ruleId":"681","severity":1,"message":"682","line":121,"column":57,"nodeType":"683","messageId":"684","endLine":121,"endColumn":58,"fix":"685"},{"ruleId":"566","replacedBy":"686"},{"ruleId":"568","replacedBy":"687"},{"ruleId":"681","severity":1,"message":"682","line":18,"column":26,"nodeType":"683","messageId":"684","endLine":18,"endColumn":27,"fix":"688"},{"ruleId":"576","severity":1,"message":"634","line":2,"column":9,"nodeType":"578","messageId":"579","endLine":2,"endColumn":15},{"ruleId":"576","severity":1,"message":"689","line":8,"column":11,"nodeType":"578","messageId":"579","endLine":8,"endColumn":14},{"ruleId":"576","severity":1,"message":"690","line":56,"column":15,"nodeType":"578","messageId":"579","endLine":56,"endColumn":19},{"ruleId":"576","severity":1,"message":"690","line":61,"column":15,"nodeType":"578","messageId":"579","endLine":61,"endColumn":19},{"ruleId":"576","severity":1,"message":"690","line":66,"column":15,"nodeType":"578","messageId":"579","endLine":66,"endColumn":19},"no-native-reassign",["691"],"no-negated-in-lhs",["692"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Formik' is defined but never used.","'userEvent' is defined but never used.",["691"],["692"],"'setRedirect' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'faTasks' is defined but never used.","'Cookies' is defined but never used.","'setLiked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["693"],"'Axios' is defined but never used.","'useState' is defined but never used.","'moment' is defined but never used.",["691"],["692"],"'Redirect' is defined but never used.","'loggedin' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'uid'. Either include it or remove the dependency array.",["694"],["695"],["696"],["691"],["692"],"'croppedImage' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'gid'. Either include it or remove the dependency array.",["697"],"React Hook useEffect has missing dependencies: 'chatid' and 'userid'. Either include them or remove the dependency array.",["698"],"React Hook useEffect has a missing dependency: 'chatid'. Either include it or remove the dependency array.",["699"],"React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array.",["700"],"'loggedIn' is assigned a value but never used.","'SRLWrapper' is defined but never used.","'images' is assigned a value but never used.","'toggleModal' is assigned a value but never used.","'reason' is assigned a value but never used.","'reasonDescription' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'YouTube' is defined but never used.","'videoRef' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Button' is defined but never used.","'posts' is assigned a value but never used.","'show' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["701"],["702"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'formik' is assigned a value but never used.","'io' is defined but never used.",["703"],["704"],["705"],["706"],"React Hook useEffect has a missing dependency: 'message.sender'. Either include it or remove the dependency array.",["707"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'conversation.participants' and 'uid'. Either include them or remove the dependency array.",["708"],["709"],["710"],["711"],["712"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setImg' needs the current value of 'user._id'.",["713"],"React Hook useEffect has a missing dependency: 'message.sender'. Either include it or remove the dependency array. If 'setImg' needs the current value of 'message.sender', you can also switch to useReducer instead of useState and read 'message.sender' in the reducer.",["714"],"'Modal' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faPhone' is defined but never used.","'receivingCall' is assigned a value but never used.","'callAccepted' is assigned a value but never used.","'idToCall' is assigned a value but never used.","'setIdToCall' is assigned a value but never used.","'callEnded' is assigned a value but never used.","'callUser' is assigned a value but never used.","'answerCall' is assigned a value but never used.","'leaveCall' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"715","text":"716"},["691"],["692"],{"range":"717","text":"716"},"'add' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"720","fix":"722"},{"desc":"720","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"desc":"728","fix":"729"},{"desc":"730","fix":"731"},{"desc":"732","fix":"733"},{"desc":"718","fix":"734"},{"desc":"728","fix":"735"},{"desc":"720","fix":"736"},{"desc":"720","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},{"desc":"738","fix":"744"},{"desc":"732","fix":"745"},{"desc":"746","fix":"747"},{"desc":"732","fix":"748"},{"desc":"749","fix":"750"},{"desc":"740","fix":"751"},[3197,3198],"",[484,485],"Update the dependencies array to be: [user]",{"range":"752","text":"753"},"Update the dependencies array to be: [uid]",{"range":"754","text":"755"},{"range":"756","text":"755"},{"range":"757","text":"755"},"Update the dependencies array to be: [gid]",{"range":"758","text":"759"},"Update the dependencies array to be: [chatid, userid]",{"range":"760","text":"761"},"Update the dependencies array to be: [chatid]",{"range":"762","text":"763"},"Update the dependencies array to be: [userSearch, users]",{"range":"764","text":"765"},"Update the dependencies array to be: [userid]",{"range":"766","text":"767"},{"range":"768","text":"753"},{"range":"769","text":"763"},{"range":"770","text":"755"},{"range":"771","text":"755"},"Update the dependencies array to be: [searchText, users]",{"range":"772","text":"773"},"Update the dependencies array to be: [message.sender]",{"range":"774","text":"775"},"Update the dependencies array to be: [conversation.participants, uid]",{"range":"776","text":"777"},{"range":"778","text":"773"},{"range":"779","text":"767"},"Update the dependencies array to be: [user._id, userid]",{"range":"780","text":"781"},{"range":"782","text":"767"},"Update the dependencies array to be: [current, conversation, user._id]",{"range":"783","text":"784"},{"range":"785","text":"775"},[673,675],"[user]",[1275,1277],"[uid]",[928,930],[768,770],[1909,1911],"[gid]",[2696,2698],"[chatid, userid]",[2952,2954],"[chatid]",[3392,3404],"[userSearch, users]",[1423,1425],"[userid]",[2010,2012],[703,705],[753,755],[1053,1055],[1261,1273],"[searchText, users]",[381,383],"[message.sender]",[534,536],"[conversation.participants, uid]",[1668,1680],[2779,2781],[3109,3120],"[user._id, userid]",[3972,3974],[758,781],"[current, conversation, user._id]",[605,607]]